{"version":3,"file":"static/js/153.e5c3481e.chunk.js","mappings":"yHAQAA,EAAQ,EAWR,SAAoBC,EAAYC,GAC5B,OAAOC,EAAWF,GAAYG,MAAK,SAAUC,GACzC,IAAIC,EAAUD,EAAMC,QAIhBC,EAA2B,QAAfF,EAAMG,MAAkBN,EAAOM,OAASH,EAAMG,KAG9D,GAAKD,GAAaD,IAAcC,IAAaD,EACzC,OAAO,EAGX,IAAIG,EAAmBJ,EAAMK,YAAYC,OAAM,SAAUC,GACrD,IAAIC,EAAWD,EAAWC,QACtBC,EAAWF,EAAWE,SACtBC,EAAWH,EAAWI,MACtBA,EAAWd,EAAOW,GAGtB,IAAKG,EAAS,OAAO,EAErB,OAAQH,GACJ,IAAK,cACL,IAAK,OACD,OAAOG,EAAMC,gBAAkBF,EAASE,cAE5C,IAAK,QACL,IAAK,SACL,IAAK,eACL,IAAK,gBACDF,EAAWG,EAAKH,GAChBC,EAAWE,EAAKF,GAChB,MAEJ,IAAK,aACDD,EAAWI,EAAMJ,GACjBC,EAAWG,EAAMH,GACjB,MAEJ,IAAK,eACL,IAAK,sBACL,IAAsB,qBAClBD,EAAWK,EAAUL,GACrBC,EAAWI,EAAUJ,GACrB,MAEJ,IAAK,OACL,IAAK,QACL,IAAK,cACL,IAAK,aACDD,EAAWM,SAASN,EAAU,KAAO,EACrCC,EAAWK,SAASL,EAAO,KAAO,EAI1C,OAAQF,GACJ,IAAK,MAAO,OAAOE,GAASD,EAC5B,IAAK,MAAO,OAAOC,GAASD,EAC5B,QAAY,OAAOC,IAAUD,EAErC,IAEA,OAAQN,IAAqBH,IAAcG,GAAoBH,CACnE,GACJ,EAvEA,IAAIgB,EAAqB,sDACrBC,EAAqB,gDACrBC,EAAqB,uBACrBC,EAAqB,+BACrBC,EAAqB,oBAqEzB,SAASvB,EAAWF,GAChB,OAAOA,EAAW0B,MAAM,KAAKC,KAAI,SAAUvB,GAGvC,IAAIwB,GAFJxB,EAAQA,EAAMyB,QAEUC,MAAMT,GAC1BR,EAAce,EAAS,GACvBrB,EAAcqB,EAAS,GACvBnB,EAAcmB,EAAS,IAAM,GAC7BG,EAAc,CAAC,EAmBnB,OAjBAA,EAAO1B,UAAYQ,GAAuC,QAA3BA,EAASG,cACxCe,EAAOxB,KAAUA,EAAOA,EAAKS,cAAgB,MAG7CP,EAAcA,EAAYqB,MAAM,gBAAkB,GAElDC,EAAOtB,YAAcA,EAAYkB,KAAI,SAAUhB,GAC3C,IAAIiB,EAAWjB,EAAWmB,MAAMR,GAC5BV,EAAWgB,EAAS,GAAGZ,cAAcc,MAAMP,GAE/C,MAAO,CACHV,SAAUD,EAAQ,GAClBA,QAAUA,EAAQ,GAClBG,MAAUa,EAAS,GAE3B,IAEOG,CACX,GACJ,CAIA,SAASZ,EAAUa,GACf,IACIC,EADAC,EAAUC,OAAOH,GAQrB,OALKE,IAEDA,GADAD,EAAUD,EAAMF,MAAM,yBACJ,GAAKG,EAAQ,IAG5BC,CACX,CAEA,SAAShB,EAAMkB,GACX,IAAIrB,EAAQsB,WAAWD,GAGvB,OAFYE,OAAOF,GAAYN,MAAML,GAAoB,IAGrD,IAAK,OAAQ,OAAOV,EAAQ,KAC5B,IAAK,OAAQ,OAAe,GAARA,EACpB,QAAa,OAAOA,EAE5B,CAEA,SAASE,EAAKsB,GACV,IAAIxB,EAAQsB,WAAWE,GAGvB,OAFYD,OAAOC,GAAQT,MAAMN,GAAgB,IAG7C,IAAK,KACL,IAAK,MAAO,OAAe,GAART,EACnB,IAAK,KAAO,OAAe,GAARA,EAAa,KAChC,IAAK,KAAO,OAAe,GAARA,EAAa,KAAO,GACvC,IAAK,KAAO,OAAe,GAARA,EACnB,IAAK,KAAO,OAAe,GAARA,EACnB,IAAK,KAAO,OAAe,GAARA,EAAa,GAChC,QAAY,OAAOA,EAE3B,C,oCC1JA,IAAIyB,EAAcC,EAAAA,MAAAA,EACdC,EAAiC,qBAAXC,OAAyBA,OAAOC,WAAa,KAGvE,SAASC,EAAIzC,EAAOH,EAAQ6C,GAC1B,IACIC,EADAC,EAAOC,KAkCX,SAASC,EAAOC,GACdH,EAAKI,QAAUD,EAAIC,QACnBJ,EAAKK,MAAQF,EAAIE,KACnB,CAhCGX,IAAiBI,IAAaC,EAAML,EAAaY,KAAKX,OAAQvC,IAE7D2C,GACFE,KAAKG,QAAUL,EAAIK,QACnBH,KAAKI,MAAQN,EAAIM,MAEjBN,EAAIQ,YAAYL,KAEhBD,KAAKG,QAAUZ,EAAYpC,EAAOH,GAClCgD,KAAKI,MAAQjD,GAGf6C,KAAKM,YAIL,SAAqBC,GAChBT,GACDA,EAAIQ,YAAYC,EAEpB,EAPAP,KAAKQ,eASL,SAAwBD,GACnBT,GACDA,EAAIU,eAAeD,EAEvB,EAZAP,KAAKS,QAoBL,WACKX,GACDA,EAAIU,eAAeP,EAEvB,CACF,CAMAS,EAAO5D,QAJP,SAAoBK,EAAOH,EAAQ6C,GACjC,OAAO,IAAID,EAAIzC,EAAOH,EAAQ6C,EAChC,C,mCC9CA,IAAIc,EAAuBnB,EAAQ,MAEnC,SAASoB,IAAiB,CAC1B,SAASC,IAA0B,CACnCA,EAAuBC,kBAAoBF,EAE3CF,EAAO5D,QAAU,WACf,SAASiE,EAAKC,EAAOC,EAAUC,EAAeC,EAAUC,EAAcC,GACpE,GAAIA,IAAWV,EAAf,CAIA,IAAIW,EAAM,IAAIC,MACZ,mLAKF,MADAD,EAAIE,KAAO,sBACLF,CAPN,CAQF,CAEA,SAASG,IACP,OAAOV,CACT,CAHAA,EAAKW,WAAaX,EAMlB,IAAIY,EAAiB,CACnBC,MAAOb,EACPc,OAAQd,EACRe,KAAMf,EACNgB,KAAMhB,EACNiB,OAAQjB,EACRkB,OAAQlB,EACRmB,OAAQnB,EACRoB,OAAQpB,EAERqB,IAAKrB,EACLsB,QAASZ,EACTa,QAASvB,EACTwB,YAAaxB,EACbyB,WAAYf,EACZgB,KAAM1B,EACN2B,SAAUjB,EACVkB,MAAOlB,EACPmB,UAAWnB,EACXoB,MAAOpB,EACPqB,MAAOrB,EAEPsB,eAAgBlC,EAChBC,kBAAmBF,GAKrB,OAFAe,EAAeqB,UAAYrB,EAEpBA,CACT,C,uBC/CEjB,EAAO5D,QAAU0C,EAAQ,IAARA,E,gCCNnBkB,EAAO5D,QAFoB,8C,oICRvBmG,EAAmB,SACnBC,EAAY,OACZC,EAAQ,CAAC,EAEb,SAASC,EAAcvE,GACrB,MAAO,IAAMA,EAAMd,aACrB,CAWA,MATA,SAA4ByD,GAC1B,GAAI2B,EAAME,eAAe7B,GACvB,OAAO2B,EAAM3B,GAGf,IAAI8B,EAAQ9B,EAAK+B,QAAQN,EAAkBG,GAC3C,OAAQD,EAAM3B,GAAQ0B,EAAUM,KAAKF,GAAS,IAAMA,EAAQA,CAC9D,ECdc,SAAUG,EACtBC,EACAC,GAEA,GAAID,IAASC,EACX,OAAO,EAGT,IAAKD,IAASC,EACZ,OAAO,EAGT,IAAMC,EAAQC,OAAOC,KAAKJ,GACpBK,EAAQF,OAAOC,KAAKH,GACpBK,EAAMJ,EAAMtE,OAElB,GAAIyE,EAAMzE,SAAW0E,EACnB,OAAO,EAGT,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKC,IAAK,CAC5B,IAAMC,EAAMN,EAAMK,GAElB,GACEP,EAAKQ,KAASP,EAAKO,KAClBL,OAAOM,UAAUd,eAAehD,KAAKsD,EAAMO,GAE5C,OAAO,CAEV,CAED,OAAO,CACT,C,uBChCME,EAAiBpB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAGxDqB,EAAQ,CACZC,IAAKtB,IAAAA,KACLuB,KAAMvB,IAAAA,KACNwB,MAAOxB,IAAAA,KACPyB,QAASzB,IAAAA,KACT0B,SAAU1B,IAAAA,KACV2B,MAAO3B,IAAAA,KACP4B,WAAY5B,IAAAA,KACZ6B,OAAQ7B,IAAAA,KACR8B,IAAK9B,IAAAA,KACL+B,GAAI/B,IAAAA,KACJgC,SAAUhC,IAAAA,MAINiC,EAAW,CACfC,YAAalC,IAAAA,MAAgB,CAAC,WAAY,cAE1CmC,KAAMnC,IAAAA,MAAgB,CAAC,cAAe,cAEtCoC,YAAapC,IAAAA,OACbqC,kBAAmBrC,IAAAA,OAEnBsC,OAAQlB,EACRmB,aAAcnB,EAEdoB,MAAOpB,EACPqB,YAAarB,EAEbsB,MAAO1C,IAAAA,KAEP2C,WAAY3C,IAAAA,KAEZ4C,WAAY5C,IAAAA,KACZ7D,WAAYiF,EACZ9G,KAAMuG,OAAOC,KAAKO,IAIHwB,GAAe,OAAKZ,EAAQ,UAGvCa,GAAW,QACfC,eAAgB/C,IAAAA,OAChBgD,eAAgBhD,IAAAA,OAChBiD,qBAAsBjD,IAAAA,OACtBkD,qBAAsBlD,IAAAA,OAEtBmD,UAAW/B,EACXgC,UAAWhC,EACXiC,gBAAiBjC,EACjBkC,gBAAiBlC,EAEjBmC,SAAUnC,EACVoC,SAAUpC,EACVqC,eAAgBrC,EAChBsC,eAAgBtC,EAEhBuC,SAAU3D,IAAAA,OACV4D,SAAU5D,IAAAA,OAEV6D,cAAe7D,IAAAA,OACf8D,cAAe9D,IAAAA,OAEf+D,cAAe/D,IAAAA,OACfgE,cAAehE,IAAAA,OAEfiE,cAAe7C,EACf8C,cAAe9C,GAEZyB,GAKL,EAAe,CACbvB,KAHU,kBAAKD,GAAUyB,GAIzBzB,MAAOA,EACPY,SAAUA,EACVa,SAAUA,GC5DNqB,EAAU,SAACC,GACf,IAAMC,EAAkB,GAOxB,OANAxD,OAAOC,KAAKwD,EAAGhD,KAAKiD,SAAQ,SAACC,GAC3B,IAAMC,EAAIL,EAAII,GACL,MAALC,GACFJ,EAAMK,KAvBG,SAACF,EAAWC,GACzB,IAAME,EAAUC,EAAUJ,GAM1B,MAHiB,kBAANC,IACTA,EAAI,GAAH,OAAMA,EAAC,QAEA,IAANA,EACKE,GAEC,IAANF,EAZsB,cAaVE,GAET,IAAP,OAAWA,EAAO,aAAKF,EAAC,IAC1B,CASiBI,CAAOL,EAAGC,GAEzB,IACYJ,EAVkCS,KAAK,QAWrD,EC9BMC,GAAUC,EAAAA,EAAAA,oBACdC,GCUIC,EAAgB,SAACd,GAGrB,GAAKA,EAGL,OAFavD,OAAOC,KAAKsD,GAEbe,QACV,SAACC,EAAQlE,GAEP,OADAkE,EAAOR,EAAU1D,IAAQkD,EAAIlD,GACtBkE,C,GAET,CAAC,EAEL,EAEMC,EAAc,WAClB,IAAMC,GAAMC,EAAAA,EAAAA,SAAO,GAMnB,OAJAC,EAAAA,EAAAA,YAAU,WACRF,EAAIG,SAAU,C,GACb,IAEIH,EAAIG,OACb,EAoBMC,EAAW,SAACC,GAChB,IAAMC,EAAW,WAAH,OA/CE,SAACD,GAA4B,OAC7CA,EAASxL,OAASgK,EAAQwB,EAAS,CA8CZE,CAAUF,EAAS,EAC1C,GAA0BG,EAAAA,EAAAA,UAASF,GAASG,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArC5L,EAAK,KAAE6L,EAAQ,KAStB,OAPAR,EAAAA,EAAAA,YAAU,WACR,IAAMS,EAAWL,IACbzL,IAAU8L,GACZD,EAASC,EAEb,GAAG,CAACN,IAEGxL,CACT,EA0CM+L,EAAgB,SACpBP,EACAQ,EACAC,GAEA,IAAMC,EA7EU,SAChBC,GAEA,IAAMC,GAAoBC,EAAAA,EAAAA,YAAWzB,GAC/B0B,EAAY,WAAH,OACbvB,EAAcoB,IAAoBpB,EAAcqB,EAAkB,EACpE,GAA4BT,EAAAA,EAAAA,UAASW,GAAUC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAxCP,EAAM,KAAEQ,EAAS,KASxB,OAPAnB,EAAAA,EAAAA,YAAU,WACR,IAAMoB,EAAYH,IACbhG,EAAoB0F,EAAQS,IAC/BD,EAAUC,EAEd,GAAG,CAACN,EAAiBC,IAEdJ,CACT,CA6DyBU,CAAUV,GAC3BhM,EAAQuL,EAASC,GACvB,IAAKxL,EAAO,MAAM,IAAIoE,MAAM,kCAC5B,IAAM+F,EAhDc,SAACnK,EAAegM,GACpC,IAAMW,EAAgB,WAAH,OAASnK,IAAWxC,EAAOgM,GAAU,CAAC,IAAKA,EAAO,EACrE,GAAoBL,EAAAA,EAAAA,UAASgB,GAAcC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAApCzC,EAAE,KAAE0C,EAAK,KACVC,EAAW5B,IAgBjB,OAdAG,EAAAA,EAAAA,YAAU,WACR,GAAIyB,EAAU,CAEZ,IAAMC,EAAQJ,IAGd,OAFAE,EAAME,GAEC,WACDA,GACFA,EAAMzJ,SAEV,C,CAEJ,GAAG,CAACtD,EAAOgM,IAEJ7B,CACT,CA4Ba6C,CAAchN,EAAOkM,GAC1BlJ,EA3BW,SAACpD,GAClB,OAA8B+L,EAAAA,EAAAA,UAAkB/L,EAAWoD,SAAQiK,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAA5DjK,EAAO,KAAEkK,EAAU,KAc1B,OAZA7B,EAAAA,EAAAA,YAAU,WACR,IAAM8B,EAAgB,SAACC,GACrBF,EAAWE,EAAGpK,QAChB,EAIA,OAHApD,EAAWuD,YAAYgK,GACvBD,EAAWtN,EAAWoD,SAEf,WACLpD,EAAWyD,eAAe8J,EAC5B,CACF,GAAG,CAACvN,IAEGoD,CACT,CAWkBqK,CAAWlD,GACrB2C,EAAW5B,IAiBjB,OAfAG,EAAAA,EAAAA,YAAU,WACJyB,GAAYb,GACdA,EAASjJ,EAEb,GAAG,CAACA,KAEJqI,EAAAA,EAAAA,YACE,kBAAM,WACAlB,GACFA,EAAG7G,S,CAEN,GACD,IAGKN,CACT,C,mKCjIoCsK,EAAAA,E,SCDUC,EAAAA,ECuC9C,IAAMC,EAAa,CACfC,KAlBJ,WACI,MAAO,MACX,EAiBIC,SALJ,WACI,MAAO,WACX,EAIIC,OAbJ,WACI,MAAO,SACX,EAYIC,KA1CJ,WACI,MAAO,MACX,EAyCIC,SA7BJ,WACI,MAAO,UACX,EA4BIC,UArCJ,WACI,MAAO,gBACX,G,GCTuCP,EAAAA,E,SCDjCQ,EAAiB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAKnB,SAAAA,EAAYK,GAAU,IAAAC,GAAAC,EAAAA,EAAAA,GAAA,KAAAP,IAClBM,EAAAH,EAAAhL,KAAA,OACKqL,aAAe,CAAEC,WAAY,OAElC,IAAMC,GAAaC,EAAAA,EAAAA,GAAgBN,GAEiB,OADpDC,EAAKE,aAAaI,IAAMF,EACxBJ,EAAKO,aAAa,IAAIC,EAAAA,EAAU,MAAOJ,IAAaJ,CACxD,CAMC,OANAS,EAAAA,EAAAA,GAAAf,EAAA,OAAAhH,IAAA,WAAApG,MACD,SAAgBoO,GAIZ,OAAO,IAAIlM,KAHKkM,EAARJ,IAIZ,KAACZ,CAAA,CAlBkB,CAASR,EAAAA,GC8ChC,SAASoB,EAAIA,GACT,OAAO,IAAIZ,EAAkBY,EACjC,C,yHCpDMK,EAAe,SAAAC,IAAAhB,EAAAA,EAAAA,GAAAe,EAAAC,GAAA,IAAAf,GAAAC,EAAAA,EAAAA,GAAAa,GACjB,SAAAA,EAAYE,GAAK,IAAAb,EAEE,OAFFC,EAAAA,EAAAA,GAAA,KAAAU,IACbX,EAAAH,EAAAhL,KAAA,KAAMgM,IACDA,IAAMA,EAAIb,CACnB,CAGC,OAHAS,EAAAA,EAAAA,GAAAE,EAAA,EAAAjI,IAAA,WAAApG,MACD,WACI,OAAOkC,KAAKqM,GAChB,KAACF,CAAA,CAPgB,C,QAASG,G,oBCIxB7B,EAAc,SAAAU,IAAAC,EAAAA,EAAAA,GAAAX,EAAAU,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAb,GAOhB,SAAAA,EAAY8B,EAAaC,EAAcC,GAAe,IAAAjB,EAG9CkB,EASwD,OAZVjB,EAAAA,EAAAA,GAAA,KAAAhB,IAClDe,EAAAH,EAAAhL,KAAA,OACKqL,aAAe,CAAC,EAGjBgB,EADAF,aAAwBL,EACJK,EAAaG,WAGbH,EAExBhB,EAAKE,aAAaC,WAAaiB,EAAAA,GAAiCL,GAChEf,EAAKE,aAAae,GAAiBC,EACnClB,EAAKO,aAAa,IAAIC,EAAAA,EAAUO,EAAaC,IAAehB,CAChE,CAAC,OAAAS,EAAAA,EAAAA,GAAAxB,EAAA,CApBe,CAASC,EAAAA,E,mICOvBmC,EAAoB,SAAAC,IAAA1B,EAAAA,EAAAA,GAAAyB,EAAAC,GAAA,IAAAzB,GAAAC,EAAAA,EAAAA,GAAAuB,GACtB,SAAAA,EAAYE,GAAM,OAAAtB,EAAAA,EAAAA,GAAA,KAAAoB,GAAAxB,EAAAhL,KAAA,KACR,cAAe0M,EACzB,CAAC,OAAAd,EAAAA,EAAAA,GAAAY,EAAA,CAHqB,C,QAASG,GA6BnC,ICrCMC,EAAoB,SAAAC,IAAA9B,EAAAA,EAAAA,GAAA6B,EAAAC,GAAA,IAAA7B,GAAAC,EAAAA,EAAAA,GAAA2B,GACtB,SAAAA,EAAYV,EAAaC,GAAc,OAAAf,EAAAA,EAAAA,GAAA,KAAAwB,GAAA5B,EAAAhL,KAAA,KAC7BkM,EAAaC,EAAc,aACrC,CAqDC,OApDDP,EAAAA,EAAAA,GAAAgB,EAAA,EAAA/I,IAAA,QAAApG,MAIA,WAGI,OAFAkC,KAAK0L,aAAayB,OAAQ,EAC1BnN,KAAKoN,SAAQD,EAAAA,EAAAA,OACNnN,IACX,GACA,CAAAkE,IAAA,cAAApG,MAIA,SAAYiP,GASR,OARIA,aAAgBF,GAChB7M,KAAK0L,aAAa2B,YAAc,CAAEN,KAAMA,EAAKO,gBAC7CtN,KAAKoN,QAAQL,KAGb/M,KAAK0L,aAAa2B,YAAc,CAAEN,KAAMA,GACxC/M,KAAKoN,SAAQC,EAAAA,EAAAA,IAAYN,KAEtB/M,IACX,GACA,CAAAkE,IAAA,uBAAApG,MAGA,WAGI,OAFAkC,KAAK0L,aAAa6B,sBAAuB,EACzCvN,KAAKoN,SAAQG,EAAAA,EAAAA,OACNvN,IACX,IAAC,EAAAkE,IAAA,WAAApG,MACD,SAAgBoO,GACZ,IACI9D,EADIoF,EAAyDtB,EAAzDsB,WAAYL,EAA6CjB,EAA7CiB,MAAOE,EAAsCnB,EAAtCmB,YAAaE,EAAyBrB,EAAzBqB,qBAkBxC,OAfInF,EADAoF,EACS,IAAIxN,KAAK,IAAKwN,GAGd,IAAIxN,KAAK,KAElBqN,IACIA,EAAYN,KACZ3E,EAAOiF,YAAYA,EAAYN,MAG/B3E,EAAOiF,eAGfF,GAAS/E,EAAO+E,QAChBI,GAAwBnF,EAAOmF,uBACxBnF,CACX,KAAC6E,CAAA,CAxDqB,CAASxC,EAAAA,E,4KCHtBgD,EAAyB,SAAArB,IAAAhB,EAAAA,EAAAA,GAAAqC,EAAArB,GAAA,IAAAf,GAAAC,EAAAA,EAAAA,GAAAmC,GAAA,SAAAA,IAAA,OAAAhC,EAAAA,EAAAA,GAAA,KAAAgC,GAAApC,EAAAqC,MAAA,KAAAC,UAAA,QAAA1B,EAAAA,EAAAA,GAAAwB,EAAA,EAASnB,EAAAA,G,8BCQzCsB,EAAkB,SAAAzC,IAAAC,EAAAA,EAAAA,GAAAwC,EAAAzC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAsC,GAMpB,SAAAA,EAAYC,EAAUC,EAAWC,GAAY,IAAAvC,EAMH,OANGC,EAAAA,EAAAA,GAAA,KAAAmC,IACzCpC,EAAAH,EAAAhL,KAAA,OACKqL,aAAe,CAAEsC,WAAY,CAAC,GACnCxC,EAAKE,aAAaC,WAAasC,EAAAA,GAA6BJ,IAAaA,EACzErC,EAAKO,aAAa,IAAIC,EAAAA,EAAU,IAAK6B,IACrCC,GAAatC,EAAKhG,MAAMsI,GACxBC,GAAcvC,EAAKlG,OAAOyI,GAAYvC,CAC1C,CAkEC,OAjEDS,EAAAA,EAAAA,GAAA2B,EAAA,EAAA1J,IAAA,SAAApG,MAIA,SAAOoQ,GAEH,OADAlO,KAAK0L,aAAasC,WAAW1I,OAAS4I,EAC/BlO,KAAK+L,aAAa,IAAIC,EAAAA,EAAU,IAAKkC,GAChD,GACA,CAAAhK,IAAA,QAAApG,MAIA,SAAMoQ,GAEF,OADAlO,KAAK0L,aAAasC,WAAWxI,MAAQ0I,EAC9BlO,KAAK+L,aAAa,IAAIC,EAAAA,EAAU,IAAKkC,GAChD,GACA,CAAAhK,IAAA,cAAApG,MAOA,SAAYiB,GAER,OAAIA,aAAiB0O,GACjBzN,KAAK0L,aAAasC,WAAW5I,YAAc,GAAH+I,OAAMpP,GACvCiB,KAAK+L,aAAa,IAAIC,EAAAA,EAAU,KAAMjN,KAE5B,kBAAVA,GAAuC,kBAAVA,GACpCiB,KAAK0L,aAAasC,WAAW5I,aAAcyG,EAAAA,EAAAA,GAAgB9M,GACpDiB,KAAK+L,aAAa,IAAIC,EAAAA,EAAU,MAAMH,EAAAA,EAAAA,GAAgB9M,MAE7DA,aAAiBiO,EAAAA,GACjBhN,KAAK0L,aAAasC,WAAW5I,YAAc,GAAH+I,OAAMpP,EAAMqP,gBAC7CpO,KAAKoN,QAAQrO,SAFxB,CAIJ,GACA,CAAAmF,IAAA,WAAApG,MAIA,WAEI,OADAkC,KAAK0L,aAAa2C,UAAW,EACtBrO,KAAKoN,SAAQiB,EAAAA,EAAAA,MACxB,GACA,CAAAnK,IAAA,iBAAApG,MAIA,WAEI,OADAkC,KAAK0L,aAAa4C,gBAAiB,EAC5BtO,KAAKoN,SAAQkB,EAAAA,EAAAA,MACxB,IAAC,EAAApK,IAAA,WAAApG,MACD,SAAgBoO,GACZ,IAAQP,EAAqDO,EAArDP,WAAYqC,EAAyC9B,EAAzC8B,WAAYK,EAA6BnC,EAA7BmC,SAAUC,EAAmBpC,EAAnBoC,eAClClJ,EAA+B4I,EAA/B5I,YAAaI,EAAkBwI,EAAlBxI,MAAOF,EAAW0I,EAAX1I,OAItB8C,EAAS,IAAIpI,KAHFuO,EAAAA,GAA6B5C,IAAeA,EAG3BnG,EAAOF,GAIzC,OAHAF,GAAegD,EAAOhD,YAA4B,wBAAhBA,GAAwCoJ,EAAAA,EAAAA,MAA6BpJ,GACvGiJ,GAAYjG,EAAOiG,WACnBC,GAAkBlG,EAAOkG,iBAClBlG,CACX,KAACwF,CAAA,CA/EmB,CAASlD,EAAAA,G,UCP3B+D,EAAgB,SAAAC,IAAAtD,EAAAA,EAAAA,GAAAqD,EAAAC,GAAA,IAAArD,GAAAC,EAAAA,EAAAA,GAAAmD,GAIlB,SAAAA,EAAY3Q,GAAO,OAAA2N,EAAAA,EAAAA,GAAA,KAAAgD,GAAApD,EAAAhL,KAAA,KACT,IAAK,IAAIiM,EAAAA,EAAexO,GAClC,CAAC,OAAAmO,EAAAA,EAAAA,GAAAwC,EAAA,CANiB,CAASzC,EAAAA,GCAzB2C,EAAW,SAAAC,IAAAxD,EAAAA,EAAAA,GAAAuD,EAAAC,GAAA,IAAAvD,GAAAC,EAAAA,EAAAA,GAAAqD,GACb,SAAAA,IAEI,OAFUlD,EAAAA,EAAAA,GAAA,KAAAkD,GAEVtD,EAAAhL,KAAA,KACM,OACV,CAQC,OAPD4L,EAAAA,EAAAA,GAAA0C,EAAA,EAAAzK,IAAA,YAAApG,MAIA,WAA+B,QAAA+Q,EAAAlB,UAAArO,OAAlBwP,EAAgB,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAhBF,EAAgBE,GAAArB,UAAAqB,GAEzB,OADAhP,KAAKiP,SAASH,GACP9O,IACX,KAAC2O,CAAA,CAbY,CAASF,GCApBS,EAAc,SAAAN,IAAAxD,EAAAA,EAAAA,GAAA8D,EAAAN,GAAA,IAAAvD,GAAAC,EAAAA,EAAAA,GAAA4D,GAChB,SAAAA,EAAYC,GAER,OAFwB1D,EAAAA,EAAAA,GAAA,KAAAyD,GAExB7D,EAAAhL,KAAA,KACM8O,EACV,CAcC,OAbDlD,EAAAA,EAAAA,GAAAiD,EAAA,EAAAhL,IAAA,kBAAApG,MAIA,SAAgBuO,GAQZ,OADArM,KAAKiP,SAAS5C,EAAI+B,gBACXpO,IACX,KAACkP,CAAA,CAnBe,CAAST,GCAvBW,EAAc,SAAAR,IAAAxD,EAAAA,EAAAA,GAAAgE,EAAAR,GAAA,IAAAvD,GAAAC,EAAAA,EAAAA,GAAA8D,GAChB,SAAAA,EAAYC,GAER,OAFa5D,EAAAA,EAAAA,GAAA,KAAA2D,GAEb/D,EAAAhL,KAAA,KACMgP,EACV,CAAC,OAAApD,EAAAA,EAAAA,GAAAmD,EAAA,CALe,CAASX,GCkC7B,SAASa,IAAiB,QAAAT,EAAAlB,UAAArO,OAANiQ,EAAI,IAAAR,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJO,EAAIP,GAAArB,UAAAqB,GACpB,IAAMQ,EAAM,GAAHrB,OAAOoB,GAChB,OAAO,IAAIL,EAAeM,EAC9B,CAyBA,SAASC,IACL,OAAO,IAAId,CACf,CA2BA,IC5FMe,EAAY,SAAAtD,IAAAhB,EAAAA,EAAAA,GAAAsE,EAAAtD,GAAA,IAAAf,GAAAC,EAAAA,EAAAA,GAAAoE,GACd,SAAAA,EAAYlO,GAAM,IAAAgK,EAEG,OAFHC,EAAAA,EAAAA,GAAA,KAAAiE,IACdlE,EAAAH,EAAAhL,KAAA,OACKmB,KAAOA,EAAKgK,CACrB,CAGC,OAHAS,EAAAA,EAAAA,GAAAyD,EAAA,EAAAxL,IAAA,WAAApG,MACD,WACI,OAAOkC,KAAKwB,IAChB,KAACkO,CAAA,CAPa,CAASpD,EAAAA,GCmB3B,SAASqD,EAAgBC,GACrB,MAAO,GAAAzB,OAAGyB,GAAUrM,QAAQ,KAAM,GACtC,CAqCA,SAASsM,EAAuBD,GAC5B,IACM5S,EADgB4S,EAAQE,WACDrR,MAAM,KAC7B2J,EAAS,CACXnG,OAAQjF,EAAO,IAUnB,OARIA,EAAOsC,OAAS,IACE,UAAdtC,EAAO,GACPoL,EAAO2H,OAAQ,EAGf3H,EAAO4H,QAAUhT,EAAO,IAGzBoL,CACX,CAKA,SAAS6H,EAAuBL,GAC5B,IACMM,EAA+B,SAAZN,EAAqB,IAAIjB,EAAgBiB,EAQlE,MAAO,CACHO,YAAa,OACbC,WATA,GAAAjC,OAAGyB,GAAUS,WAAW,SACf,GAAAlC,OAAGyB,GAAUnR,MAAM,KAAK6R,QAAO,SAAC7I,GAAC,MAAW,SAANA,CAAY,IAGlDyI,EAAiB9B,eAAepR,OAAOsT,QAAO,SAAC7I,GAAC,MAAW,SAANA,CAAY,KAErD/I,IAAImR,GAKjC,CAkCO,SAASU,EAAmBX,GAC/B,OArHJ,SAA0BA,GAEtB,IAAMY,EAAeb,EAAgBC,GACrC,MAAO,CAAC,QAAS,SAAU,OAAQ,OAAQ,QAAS,aAAc,aAAc,aAAc,cAAca,SAASD,EACzH,CAiHQE,CAAiBd,GArGzB,SAAmCA,GAC/B,MAAO,CACHe,QAAShB,EAAgBC,GACzBO,YAAa,YAErB,CAiGeS,CAA0BhB,GA5FzC,SAAsBA,GAClB,MAAoC,aAA7BD,EAAgBC,EAC3B,CA4FQiB,CAAajB,GAvFV,CACHO,YAAa,OAzCrB,SAA8BP,GAC1B,OAAOA,GAA0C,SAA/B,GAAAzB,OAAGyB,GAAUnR,MAAM,KAAK,EAC9C,CAgIQqS,CAAqBlB,IAlF7B,SAAuBA,GACnB,MAAqD,SAA9C,GAAAzB,OAAGyB,EAAQxB,gBAAiB3P,MAAM,KAAK,EAClD,CAgFyCsS,CAAcnB,GACxCK,EAAuBL,GArCtC,SAAmCA,GAC/B,IAAMoB,EAAiB,GAAA7C,OAAGyB,GAAUnR,MAAM,KAAKgS,SAAS,QAClDzT,EAAS4S,EAAQxB,eAAepR,OAEhCoL,EAAS,CACX+H,YAAa,SACbc,gBAHkBD,EAAiBhU,EAAOkU,MAAM,EAAGlU,EAAOsC,OAAS,GAAKtC,GAG1C0B,KAAI,SAAC+I,GAAC,SAAA0G,OAAQ1G,EAAC,KAEjD,GAAIuJ,EAAgB,KAAAG,EAEVC,EAAmBpU,EAAOA,EAAOsC,OAAS,GAAGtC,OAAOkU,MAAM,GAC1DG,GAAsBF,EAAA1B,KAAcW,UAAS1C,MAAAyD,GAAAG,EAAAA,EAAAA,GAAIF,IACvDhJ,EAAOmJ,gBAAkBtB,EAAuBoB,EACpD,CACA,OAAOjJ,CACX,CAwBWoJ,CAA6C,kBAAZ5B,EAnB5C,SAA8BA,GAC1B,IACM6B,EADS7B,EAAQnR,MAAM,KACAC,KAAI,SAACgT,GAAC,OAAK,IAAIhC,EAAagC,EAAE,IAC3D,OAAO,IAAIxC,EAAeuC,EAC9B,CAemEE,CAAqB/B,GAAWA,EACnG,CCsIA,SAASgC,IACL,OAAO,IAAIlC,EAAa,WAC5B,CAMA,IChRMmC,EAAS,SAAAzF,IAAAhB,EAAAA,EAAAA,GAAAyG,EAAAzF,GAAA,IAAAf,GAAAC,EAAAA,EAAAA,GAAAuG,GACX,SAAAA,EAAYvC,EAASU,GAAQ,IAAAxE,EAIA,OAJAC,EAAAA,EAAAA,GAAA,KAAAoG,IACzBrG,EAAAH,EAAAhL,KAAA,OACKyR,QAAU9B,EACfxE,EAAK8D,QAAUA,EACf9D,EAAKuG,aAAc,EAAMvG,CAC7B,CAUC,OATDS,EAAAA,EAAAA,GAAA4F,EAAA,EAAA3N,IAAA,kBAAApG,MAUA,WACI,MAA+B,kBAAjBkC,KAAK8R,SAAgD,kBAAjB9R,KAAK8R,SAAwB9R,KAAK+R,WACxF,GACA,CAAA7N,IAAA,UAAApG,MAIA,WACI,OAAOkC,KAAKsP,QAAQ9N,IACxB,GACA,CAAA0C,IAAA,YAAApG,MAIA,WACI,OAAIkC,KAAK+R,YACE,QAGA/R,KAAK8R,OAEpB,GACA,CAAA5N,IAAA,WAAApG,MAIA,WAEI,OAAIkC,KAAKgS,kBACE,GAAP7D,OAAUnO,KAAKiS,UAAS,KAAA9D,OAAInO,KAAKkS,aAG1B,GAAP/D,OAAUnO,KAAKiS,UAEvB,GACA,CAAA/N,IAAA,SAAApG,MAMA,SAAOqU,GAEH,OADAnS,KAAK8R,QAAUK,EACRnS,IACX,GACA,CAAAkE,IAAA,QAAApG,MAKA,WAEI,OADAkC,KAAK+R,aAAc,EACZ/R,IACX,IAAC,EAAAkE,IAAA,UAAApG,MAxDD,SAAesJ,EAAK4I,GAChB,OAAO,IAAI6B,EAAUzK,EAAK4I,EAC9B,KAAC6B,CAAA,CAhBU,CAASvF,EAAAA,GCPlB8F,GD+EUP,EAAUvC,QC/EJ,SAAAlD,IAAAhB,EAAAA,EAAAA,GAAAgH,EAAAhG,GAAA,IAAAf,GAAAC,EAAAA,EAAAA,GAAA8G,GAClB,SAAAA,EAAY/F,GAAK,IAAAb,EAEE,OAFFC,EAAAA,EAAAA,GAAA,KAAA2G,IACb5G,EAAAH,EAAAhL,KAAA,OACKgM,IAAMA,EAAIb,CACnB,CAGC,OAHAS,EAAAA,EAAAA,GAAAmG,EAAA,EAAAlO,IAAA,WAAApG,MACD,WACI,OAAOkC,KAAKqM,GAChB,KAAC+F,CAAA,CAPiB,CAAS9F,EAAAA,ICyB/B,SAAS+F,EAAyBC,GAC9B,IAAQrQ,EAA0BqQ,EAA1BrQ,OAAQ+N,EAAkBsC,EAAlBtC,OAAQD,EAAUuC,EAAVvC,MAClBK,EAAY,IAAIyB,EAAU,IAAInC,EAAazN,IAGjD,OAFC+N,GAAqB,IAAXA,IAAiBI,EAAUJ,OAAOA,GAC7CD,GAASK,EAAUL,QACZK,CACX,CAKA,SAASmC,EAA2BC,GAAc,IAAArB,EAExCf,GADiBoC,EAAapC,WAAa,IAChB1R,IAAI2T,GACrC,OAAOlB,EAAA1B,KAAcW,UAAS1C,MAAAyD,GAAAG,EAAAA,EAAAA,GAAIlB,GACtC,CAkBA,SAASqC,EAAuBD,GAC5B,OAvDJ,SAA+BA,GAC3B,MAAoC,cAA7BA,EAAarC,WACxB,CAqDQuC,CAAsBF,GACf,IAAIpD,EAAe,IAAIgD,EAAiBI,EAAa7B,UAjDpE,SAA2B6B,GACvB,MAAoC,QAA7BA,EAAarC,WACxB,CAiDQwC,CAAkBH,GACXlD,EAAQsC,KA7CvB,SAA4BY,GACxB,MAAoC,SAA7BA,EAAarC,WACxB,CA6CQyC,CAAmBJ,GACZD,EAA2BC,GArB1C,SAAuCA,GACnC,IAAMvB,GAAkBuB,EAAavB,gBAAkB,IAAIvS,KAAI,SAACmU,GAAG,OAAK,IAAInD,EAAamD,EAAI,IACvFzK,EAASkH,EAAAA,WAAQ,GAADgC,EAAAA,EAAAA,GAAIL,IAC1B,GAAIuB,EAAajB,gBAAiB,CAC9B,IAAM9B,EAAc8C,EAA2BC,EAAajB,iBAC5DnJ,EAAOmJ,gBAAgB9B,EAC3B,CACA,OAAOrH,CACX,CAeW0K,CAA8BN,EACzC,CCtEA,IAMMO,EAAoB,SAAAC,IAAA5H,EAAAA,EAAAA,GAAA2H,EAAAC,GAAA,IAAA3H,GAAAC,EAAAA,EAAAA,GAAAyH,GAAA,SAAAA,IAAA,OAAAtH,EAAAA,EAAAA,GAAA,KAAAsH,GAAA1H,EAAAqC,MAAA,KAAAC,UAAA,CAgBrB,OAhBqB1B,EAAAA,EAAAA,GAAA8G,EAAA,EAAA7O,IAAA,UAAApG,MAKtB,SAAQ8R,GACJ5P,KAAK0L,aAAakE,QAAUW,EAAmBX,GAC/C,IAAMM,EAAsC,kBAAZN,EAAuB,IAAI5D,EAAAA,EAAU,IAAK4D,GAAWA,EACrF,OAAO5P,KAAK+L,aAAamE,EAC7B,IAAC,EAAAhM,IAAA,WAAApG,MACD,SAAgBoO,GACZ,IAAM9D,GAAS6K,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAH,GAAA,iBAAerF,MAAM1N,KAAM,CAACkM,IAI3C,OAHIA,EAAY0D,SACZxH,EAAOwH,QAAQ6C,EAAuBvG,EAAY0D,UAE/CxH,CACX,KAAC2K,CAAA,CAhBqB,CAASnF,GCJD5B,EAAAA,E,QCFlC,ICIMmH,EAAgB,SAAAC,IAAAhI,EAAAA,EAAAA,GAAA+H,EAAAC,GAAA,IAAA/H,GAAAC,EAAAA,EAAAA,GAAA6H,GAAA,SAAAA,IAAA,OAAA1H,EAAAA,EAAAA,GAAA,KAAA0H,GAAA9H,EAAAqC,MAAA,KAAAC,UAAA,CAsBjB,OAtBiB1B,EAAAA,EAAAA,GAAAkH,EAAA,EAAAjP,IAAA,IAAApG,MAKlB,SAAEoQ,GAEE,OADAlO,KAAK0L,aAAawC,EAAIA,EACflO,KAAK+L,aAAa,IAAIC,EAAAA,EAAU,IAAKkC,GAChD,GACA,CAAAhK,IAAA,IAAApG,MAIA,SAAEuV,GAEE,OADArT,KAAK0L,aAAa2H,EAAIA,EACfrT,KAAK+L,aAAa,IAAIC,EAAAA,EAAU,IAAKqH,GAChD,IAAC,EAAAnP,IAAA,WAAApG,MACD,SAAgBoO,GACZ,IAAM9D,GAAS6K,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAC,GAAA,iBAAezF,MAAM1N,KAAM,CAACkM,IAG3C,OAFAA,EAAYgC,GAAK9F,EAAO8F,EAAEhC,EAAYgC,GACtChC,EAAYmH,GAAKjL,EAAOiL,EAAEnH,EAAYmH,GAC/BjL,CACX,KAAC+K,CAAA,CAtBiB,CAASJ,GCsH/B,SAASO,EAAK9N,EAAOF,GACjB,OAAO,IAAI6N,EAAiB,OAAQ3N,EAAOF,EAC/C,C,2JC5HO,SAASiO,IACZ,IAAIC,EAAIC,EAAIC,EACNC,EAAwB3T,KAAK0L,cAAgB7H,OAAOC,KAAK9D,KAAK0L,cAAcpM,OAC5EsU,EAA6K,QAAhJF,EAAwF,QAAlFD,EAAkC,QAA5BD,EAAKxT,KAAK0L,oBAAiC,IAAP8H,OAAgB,EAASA,EAAGK,cAA2B,IAAPJ,OAAgB,EAASA,EAAGK,sBAAmC,IAAPJ,OAAgB,EAASA,EAAGK,MAEvN,OAAIH,GAA6BA,aAAqCrS,MAC3D,CAAEwS,MAAOH,GAEhBD,EACO3T,KAAK0L,aAET,CAAEqI,OAAOC,EAAAA,EAAAA,GAAuB,sBAAD7F,OAAuBnO,KAAKiU,YAAYzS,OAClF,CCfO,ICQDkJ,EAAM,SAAAwJ,IAAA9I,EAAAA,EAAAA,GAAAV,EAAAwJ,GAAA,IAAA7I,GAAAC,EAAAA,EAAAA,GAAAZ,GACR,SAAAA,IAAc,IAAAc,EAUW,OAVXC,EAAAA,EAAAA,GAAA,KAAAf,IACVc,EAAAH,EAAAqC,MAAA,KAASC,YAGJwG,WAAa,IAAIC,IAItB5I,EAAK6I,MAAQ,GACb7I,EAAK8I,UAAY,IACjB9I,EAAK+I,UAAY,GAAI/I,CACzB,CAoEC,OApEAS,EAAAA,EAAAA,GAAAvB,EAAA,EAAAxG,IAAA,oBAAApG,MACD,WAAsB,GACtB,CAAAoG,IAAA,eAAApG,MAIA,WACI,OAAOkC,KAAKuU,SAChB,GACA,CAAArQ,IAAA,eAAApG,MAIA,SAAa0W,GAET,OADAxU,KAAKuU,UAAYC,EACVxU,IACX,GACA,CAAAkE,IAAA,WAAApG,MAIA,WAEI,OADAkC,KAAKyU,oBCrCb,SAA0B/V,EAAK2V,GAC3B,IAAMzS,EAAQmN,MAAM2F,KAAKhW,EAAIiW,WAQ7B,OAHAN,EAAM9M,SAAQ,SAACqN,GACXhT,EAAM8F,KAAK,CAAC,KAAMkN,GACtB,IACOhT,EAAMiT,OAAOnW,KAAI,SAAC+I,GAAC,OAAKA,EAAE,EAAE,GACvC,CD4BeqN,CAAiB9U,KAAKmU,WAAYnU,KAAKqU,OAAOvM,KAAK9H,KAAKsU,UACnE,GACA,CAAApQ,IAAA,eAAApG,MAKA,SAAaiX,GAET,GAAyB,kBAAdA,EAAwB,CAC/B,IAAAC,EAAqBD,EAAUhX,cAAcU,MAAM,KAAIwW,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAAhD9Q,EAAG+Q,EAAA,GAAEnX,EAAKmX,EAAA,GACL,OAAR/Q,EAEAlE,KAAKqU,MAAM3M,KAAK,IAAIsF,EAAAA,EAAclP,IAIlCkC,KAAKmU,WAAWgB,IAAIjR,EAAK,IAAI8H,EAAAA,EAAU9H,EAAKpG,GAEpD,MAGIkC,KAAKmU,WAAWgB,IAAIJ,EAAU7Q,IAAK6Q,GAEvC,OAAO/U,IACX,GACA,CAAAkE,IAAA,UAAApG,MAKA,SAAQ8W,GASJ,MARoB,kBAATA,EACP5U,KAAKqU,MAAM3M,KAAK,IAAIsF,EAAAA,EAAc4H,IAG9BA,aAAgB5H,EAAAA,GAChBhN,KAAKqU,MAAM3M,KAAKkN,GAGjB5U,IACX,GAAC,CAAAkE,IAAA,sBAAApG,MACD,SAAoBsX,EAAchH,GAE9B,OADApO,KAAKmU,WAAWkB,IAAID,GAAcnG,SAASb,GACpCpO,IACX,KAAC0K,CAAA,CAhFO,CDRY,WACpB,SAAA4K,KAAc7J,EAAAA,EAAAA,GAAA,KAAA6J,GACVtV,KAAK0L,aAAe,CAAC,CACzB,CAGC,OAHAO,EAAAA,EAAAA,GAAAqJ,EAAA,EAAApR,IAAA,SAAApG,MACD,WACI,OAAOyV,EAAa7F,MAAM1N,KAC9B,KAACsV,CAAA,CANmB,G,oCGGxB,SAASC,EAAWnO,GAChB,IAAMgB,EAAS,CAAC,EAIhB,OAHAvE,OAAOC,KAAKsD,GAAKG,SAAQ,SAACrD,GACtBkE,EAAOhB,EAAIlD,IAAQA,CACvB,IACOkE,CACX,C,yMCLO,IA6CMmG,EAA+B,CACxCiH,SAAU,QACVC,UAAW,QACXC,WAAY,OACZC,UAAW,QACXC,SAAU,OACVC,WAAY,OACZC,QAAS,YAmBAC,EAAkC,CAC3CC,SAAU,YACVC,QAAS,WACTC,SAAU,YACVC,QAAS,WACTC,aAAc,aACdC,eAAgB,aAChBC,aAAc,cAQLC,EAAoC,CAC7C,IAAK,aACL,IAAK,cAEIC,EAAiD,CAC1D,OAAU,UACV,SAAY,YACZ,SAAY,WACZ,cAAiB,kBAKRC,EAAoClB,EAAWgB,GAC/CG,EAAiDnB,EAAWiB,GAC5DvI,EAA+BsH,EAAWhH,GAC1C3B,EAAmC2I,EAhDA,CAC5CoB,WAAY,KACZ7K,IAAK,MACL8K,QAAS,KACTC,aAAc,IACdC,OAAQ,IACRC,QAAS,MA2CiCxB,EAzCA,CAC1CyB,OAAQ,SACRC,eAAgB,aAChBC,SAAU,YACVC,YAAa,eACbC,gBAAiB,mBACjBC,kBAAmB,cACnBC,QAAS,YAmCkC/B,EAAWQ,GACNR,EAzBK,CACrDgC,OAAQ,UACRC,WAAY,eACZC,WAAY,eACZC,OAAQ,W,mICrFL,SAASC,IACZ,OAAO3X,KAAK4X,iBAAmB,CAAE7D,OAAOC,EAAAA,EAAAA,GAAuB,yBAAD7F,OAA0BnO,KAAKiU,YAAYzS,OAC7G,CCLO,ICKDwK,EAAS,SAAA6L,IAAAzM,EAAAA,EAAAA,GAAAY,EAAA6L,GAAA,IAAAxM,GAAAC,EAAAA,EAAAA,GAAAU,GACX,SAAAA,EAAY9H,EAAKkK,GAAgB,IAAA5C,EAU5B,OAV4BC,EAAAA,EAAAA,GAAA,KAAAO,IAC7BR,EAAAH,EAAAhL,KAAA,OACKiU,UAAY,IACjB9I,EAAKtH,IAAMA,EACPkK,aAA0B9B,EAAAA,EAC1Bd,EAAK4C,eAAiBA,GAGtB5C,EAAK4C,eAAiB,IAAI9B,EAAAA,EAC1Bd,EAAK4C,eAAea,SAASb,IAChC5C,CACL,CAQC,OARAS,EAAAA,EAAAA,GAAAD,EAAA,EAAA9H,IAAA,WAAApG,MACD,WACI,IAAQoG,EAAmClE,KAAnCkE,IAAKoQ,EAA8BtU,KAA9BsU,UAAWlG,EAAmBpO,KAAnBoO,eACxB,MAAO,GAAPD,OAAUjK,GAAGiK,OAAGmG,GAASnG,OAAGC,EAAe0B,WAC/C,GAAC,CAAA5L,IAAA,WAAApG,MACD,SAASA,GAEL,OADAkC,KAAKoO,eAAea,SAASnR,GACtBkC,IACX,KAACgM,CAAA,CApBU,CDLY,WACvB,SAAA8L,KAAcrM,EAAAA,EAAAA,GAAA,KAAAqM,GACV9X,KAAK4X,gBAAkB,CAAC,CAC5B,CAGC,OAHA3L,EAAAA,EAAAA,GAAA6L,EAAA,EAAA5T,IAAA,SAAApG,MACD,WACI,OAAO6Z,EAAgBjK,MAAM1N,KACjC,KAAC8X,CAAA,CANsB,G,4FEGrBxL,EAAc,WAKhB,SAAAA,EAAY8B,IAAgB3C,EAAAA,EAAAA,GAAA,KAAAa,GACxBtM,KAAKhD,OAAS,GACdgD,KAAKsU,UAAY,IACbtU,KAAK+X,SAAS3J,IACdpO,KAAKiP,SAASb,EAEtB,CAwCC,OAvCDnC,EAAAA,EAAAA,GAAAK,EAAA,EAAApI,IAAA,WAAApG,MAGA,WACI,OAAOkC,KAAKhD,OAAO8K,KAAK9H,KAAKsU,UACjC,GACA,CAAApQ,IAAA,WAAApG,MAMA,SAAS2J,GACL,MAAoB,qBAANA,GAA2B,OAANA,GAAoB,KAANA,CACrD,GACA,CAAAvD,IAAA,WAAApG,MAKA,SAASA,GAAO,IAAA0N,EAAA,KAUZ,OARIuD,MAAMiJ,QAAQla,GACdkC,KAAKhD,OAASgD,KAAKhD,OAAOmR,OAAOrQ,GAGjCkC,KAAKhD,OAAO0K,KAAK5J,GAGrBkC,KAAKhD,OAASgD,KAAKhD,OAAOsT,QAAO,SAAC7I,GAAC,OAAK+D,EAAKuM,SAAStQ,EAAE,IACjDzH,IACX,GACA,CAAAkE,IAAA,eAAApG,MAIA,SAAawW,GAET,OADAtU,KAAKsU,UAAYA,EACVtU,IACX,KAACsM,CAAA,CAnDe,E,oCCCb,SAAS2L,EAAavS,GACzB,OAAIA,GACOA,EAAM7G,MAAM,MAAQ,OAAHsP,OAAUzI,EAAMwS,OAAO,IAGxCxS,CAEf,C,mECAO,SAASmG,EAAgB/N,GAG5B,IAAMqa,EAAcra,EAAMgS,WAE1B,OAAIqI,EAAYtZ,MAAM,YAKlBsZ,EAAY7Y,OAAS,GAAwB,MAAnB6Y,EAAY,GAJ/BA,GAQWC,MAAMhZ,WAAW+Y,MAA+C,IAA9BA,EAAYE,QAAQ,OAE1B,IAA9BF,EAAYE,QAAQ,KAC7B,GAAPlK,OAAUgK,EAAW,MAIdA,CAEf,C,8ICnCMG,EAAgB,SAAAC,IAAAnN,EAAAA,EAAAA,GAAAkN,EAAAC,GAAA,IAAAlN,GAAAC,EAAAA,EAAAA,GAAAgN,GAClB,SAAAA,IAAqC,IAAzBE,EAAO7K,UAAArO,OAAA,QAAA2I,IAAA0F,UAAA,GAAAA,UAAA,GAAG,cAAa,OAAAlC,EAAAA,EAAAA,GAAA,KAAA6M,GAAAjN,EAAAhL,KAAA,KACzBmY,EACV,CAAC,OAAAvM,EAAAA,EAAAA,GAAAqM,EAAA,CAHiB,EAGjBG,E,QAAAA,GAH0BlX,QAS/B,SAASyS,EAAuBwE,GAC5B,OAAO,IAAIF,EAAiBE,EAChC,C,2MC6IA,SAAShK,IACL,OAAO,IAAIxB,EAAAA,EAAc,sBAC7B,CAiDA,SAASG,IACL,OAAO,IAAIH,EAAAA,EAAc,QAC7B,CAgEA,SAASO,IACL,OAAO,IAAIP,EAAAA,EAAc,wBAC7B,CAkBA,SAASK,EAAYN,GACjB,OAAO,IAAIC,EAAAA,EAAc,cAAeD,EAC5C,CAOA,SAASuB,IACL,OAAO,IAAItB,EAAAA,EAAc,kBAC7B,CAkBA,SAASqB,IACL,OAAO,IAAIrB,EAAAA,EAAc,WAC7B,C,6ICzTMA,EAAa,SAAA0B,IAAAtD,EAAAA,EAAAA,GAAA4B,EAAA0B,GAAA,IAAArD,GAAAC,EAAAA,EAAAA,GAAA0B,GACf,SAAAA,EAAY0L,EAAUC,GAAW,IAAAnN,EACzB4C,EAQuB,OATE3C,EAAAA,EAAAA,GAAA,KAAAuB,GAGzBoB,EADAuK,EACiB,IAAIrM,EAAAA,EAAe,CAACoM,EAAU,GAAFvK,OAAKwK,KAAcC,aAAa,KAG5DF,GAErBlN,EAAAH,EAAAhL,KAAA,KAAM,KAAM+N,IACPuK,UAAYA,EAAUnN,CAC/B,CAMC,OANAS,EAAAA,EAAAA,GAAAe,EAAA,EAAA9I,IAAA,WAAApG,MACD,WACI,OAAOmV,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAlG,EAAA7I,WAAA,iBAAA9D,KAAA,MAAiBkD,QAAQ,MAAO,MAC3C,GAAC,CAAAW,IAAA,eAAApG,MACD,WACI,OAAOkC,KAAK2Y,SAChB,KAAC3L,CAAA,CAjBc,C,QAAShB,E,iKCCtB6M,EAAe,SAAA1N,IAAAC,EAAAA,EAAAA,GAAAyN,EAAA1N,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAuN,GACjB,SAAAA,EAAYnT,GAAO,IAAA8F,EAKkC,OALlCC,EAAAA,EAAAA,GAAA,KAAAoN,IACfrN,EAAAH,EAAAhL,KAAA,OACKqL,aAAe,CAAC,EACrBF,EAAKO,aAAa,IAAIC,EAAAA,EAAU,IAAK,IAAIM,EAAAA,GAAe2L,EAAAA,EAAAA,GAAavS,IAAQkT,aAAa,OAC1FpN,EAAKE,aAAahG,MAAQA,EAC1B8F,EAAKE,aAAaC,WAAa,kBAAkBH,CACrD,CAOC,OAPAS,EAAAA,EAAAA,GAAA4M,EAAA,OAAA3U,IAAA,WAAApG,MACD,SAAgBoO,GAKZ,OADe,IAAIlM,KAHDkM,EAAVxG,MAKZ,KAACmT,CAAA,CAdgB,CAASnO,EAAAA,G,oBCFxBoO,EAAS,WACX,SAAAA,EAAYC,IAAKtN,EAAAA,EAAAA,GAAA,KAAAqN,GACb9Y,KAAK+Y,IAAMA,CACf,CAMC,OANA9M,EAAAA,EAAAA,GAAA6M,EAAA,EAAA5U,IAAA,WAAApG,MACD,WACI,OAAOkC,KAAK+Y,GAChB,GAAC,CAAA7U,IAAA,SAAApG,MACD,WACI,MAAO,CAAEiW,OAAOC,EAAAA,EAAAA,GAAuB,sBAAD7F,OAAuBnO,KAAKiU,YAAYzS,OAClF,KAACsX,CAAA,CATU,G,cCKTE,EAAc,WAChB,SAAAA,KAAcvN,EAAAA,EAAAA,GAAA,KAAAuN,GACVhZ,KAAKiZ,QAAU,EACnB,CAiQC,OAhQDhN,EAAAA,EAAAA,GAAA+M,EAAA,EAAA9U,IAAA,YAAApG,MAIA,SAAUob,GACN,IAAIC,EACJ,GAAsB,kBAAXD,EAAqB,CAC5B,GAAIA,EAAOb,QAAQ,MAAQ,EACvB,KAAM,oGAGNc,EAAc,IAAIL,EAAUI,EAEpC,MAEIC,EAAcD,EAGlB,OADAlZ,KAAKiZ,QAAQvR,KAAKyR,GACXnZ,IACX,GACA,CAAAkE,IAAA,oBAAApG,MAUA,SAAkBsb,GAQd,OAPIA,aAAcJ,EAEdhZ,KAAKiZ,QAAUjZ,KAAKiZ,QAAQ9K,OAAOiL,EAAGH,SAGtCjZ,KAAKiZ,QAAQvR,KAAK,IAAIoR,EAAUM,IAE7BpZ,IACX,GACA,CAAAkE,IAAA,WAAApG,MAGA,WACI,OAAOkC,KAAKiZ,QACPva,KAAI,SAACwa,GACN,OAAOA,EAAOpJ,UAClB,IACKQ,QAAO,SAAC+I,GAAC,OAAKA,CAAC,IACfvR,KAAK,IACd,GACA,CAAA5D,IAAA,WAAApG,MAKA,SAASwb,GACL,OAAOtZ,KAAKuZ,UAAUD,EAC1B,GACA,CAAApV,IAAA,SAAApG,MAKA,SAAO0b,GACH,OAAOxZ,KAAKuZ,UAAUC,EAC1B,GACA,CAAAtV,IAAA,UAAApG,MAMA,SAAQ2b,GACJ,OAAOzZ,KAAKuZ,UAAUE,EAC1B,GACA,CAAAvV,IAAA,SAAApG,MAKA,SAAO4b,GACH,OAAO1Z,KAAKuZ,UAAUG,EAC1B,GACA,CAAAxV,IAAA,UAAApG,MAKA,SAAQiZ,GAEJ,OADA/W,KAAKuZ,UAAU,IAAItM,EAAAA,EAAqB,IAAK8J,IACtC/W,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAOgZ,GAEH,OADA9W,KAAKuZ,UAAU,IAAItM,EAAAA,EAAqB,IAAK6J,IACtC9W,IACX,GACA,CAAAkE,IAAA,eAAApG,MAKA,SAAa6b,GACT,OAAO3Z,KAAKuZ,UAAUI,EAC1B,GACA,CAAAzV,IAAA,UAAApG,MAKA,SAAQ8b,GACJ,OAAO5Z,KAAKuZ,UAAUK,EAC1B,GACA,CAAA1V,IAAA,WAAApG,MAKA,SAAS+b,GAEL,OADAA,EAAeC,aAAa,KACrB9Z,KAAKuZ,UAAUM,EAC1B,GACA,CAAA3V,IAAA,cAAApG,MAKA,SAAYic,GACR,OAAO/Z,KAAKuZ,UAAUQ,EAC1B,GACA,CAAA7V,IAAA,cAAApG,MAKA,SAAYkc,GACR,OAAOha,KAAKuZ,UAAUS,EAC1B,GACA,CAAA9V,IAAA,SAAApG,MAKA,SAAOmc,GACH,OAAOja,KAAKuZ,UAAUU,EAC1B,GACA,CAAA/V,IAAA,SAAApG,MAKA,SAAOob,GACH,OAAOlZ,KAAKuZ,UAAUL,EAC1B,GACA,CAAAhV,IAAA,SAAApG,MAKA,SAAOoc,GACH,OAAOla,KAAKuZ,UAAUW,EAC1B,GACA,CAAAhW,IAAA,sBAAApG,MAKA,SAAoBqc,GAChB,OAAOna,KAAKuZ,UAAUY,EAC1B,GACA,CAAAjW,IAAA,WAAApG,MAKA,SAASsc,GACL,OAAOpa,KAAKuZ,UAAUa,EAC1B,GACA,CAAAlW,IAAA,kBAAApG,MAKA,SAAgB4H,GACZ,OAAO1F,KAAKuZ,UAAU,IAAIV,EAAgBnT,GAC9C,GACA,CAAAxB,IAAA,WAAApG,MAKA,SAASob,GACL,OAAOlZ,KAAKuZ,UAAUL,EAC1B,GACA,CAAAhV,IAAA,UAAApG,MAKA,SAAQob,GACJ,OAAOlZ,KAAKuZ,UAAUL,EAC1B,GACA,CAAAhV,IAAA,UAAApG,MAKA,SAAQuc,GACJ,IAAMnB,EAAS,IAAIxO,EAAAA,EACf4P,EAAYD,EAKhB,MAJ6B,kBAAlBA,IACPC,EAAY,IAAItN,EAAAA,EAAcqN,IAElCnB,EAAOnN,aAAauO,GACbta,KAAKuZ,UAAUL,EAC1B,GACA,CAAAhV,IAAA,iBAAApG,MAIA,SAAeyc,GACX,OAAOva,KAAKuZ,UAAUgB,EAC1B,GACA,CAAArW,IAAA,YAAApG,MAKA,SAAUob,GACN,OAAOlZ,KAAKuZ,UAAUL,EAC1B,GACA,CAAAhV,IAAA,YAAApG,MAMA,SAAUob,GACN,OAAOlZ,KAAKuZ,UAAUL,EAC1B,GAAC,CAAAhV,IAAA,SAAApG,MACD,WACI,IACiC0c,EClQlBpT,EDiQT6R,EAAU,GAAGwB,GAAAC,EAAAA,EAAAA,GACE1a,KAAKiZ,SAAO,IAAjC,IAAAwB,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAmC,KACzBC,EADON,EAAA1c,MACOid,SACpB,GClQA,UAFW3T,EDoQO0T,ICnQT1T,EAC0B2M,MDoQ/B,OAAO+G,EAEX7B,EAAQvR,KAAKoT,EACjB,CAAC,OAAAxZ,GAAAmZ,EAAAO,EAAA1Z,EAAA,SAAAmZ,EAAAQ,GAAA,CACD,MAAO,CAAEhC,QAAAA,EACb,KAACD,CAAA,CApQe,GELdkC,EAAmB,SAAAC,IAAA/P,EAAAA,EAAAA,GAAA8P,EAAAC,GAAA,IAAA9P,GAAAC,EAAAA,EAAAA,GAAA4P,GAAA,SAAAA,IAAA,OAAAzP,EAAAA,EAAAA,GAAA,KAAAyP,GAAA7P,EAAAqC,MAAA,KAAAC,UAAA,QAAA1B,EAAAA,EAAAA,GAAAiP,EAAA,EAASlC,G,cCMjC,ICLYoC,EAAqB,CAC9B,QACA,qBACA,aACA,UACA,mBACA,UACA,cACA,SACA,eACA,YACA,eCsEJ,EAtFe,SAAAC,IAAAjQ,EAAAA,EAAAA,GAAAkQ,EAAAD,GAAA,IAAAhQ,GAAAC,EAAAA,EAAAA,GAAAgQ,GAIX,SAAAA,EAAYC,GAAe,IAAA/P,GAAAC,EAAAA,EAAAA,GAAA,KAAA6P,GAEvB,IAAME,GADNhQ,EAAAH,EAAAhL,KAAA,OACuBob,0BAA0BF,EAAeH,GAGlD,OAFdvX,OAAO6X,QAAMC,EAAAA,EAAAA,GAAAnQ,GAAO,CAChBoQ,QAAQ,GACTJ,GAAWhQ,CAClB,CA0EC,OA1EAS,EAAAA,EAAAA,GAAAqP,EAAA,EAAApX,IAAA,SAAApG,MACD,SAAOyd,GACH,IAAMC,EAAYxb,KAAKyb,0BAA0BF,EAAeH,GAChE,OAAO,IAAIE,EAAUzX,OAAO6X,OAAO,CAAC,EAAG1b,KAAMwb,GACjD,GACA,CAAAtX,IAAA,WAAApG,MAGA,SAASA,GAEL,OADAkC,KAAK6b,MAAQ/d,EACNkC,IACX,GACA,CAAAkE,IAAA,wBAAApG,MAGA,SAAsBA,GAElB,OADAkC,KAAK8b,mBAAqBhe,EACnBkC,IACX,GACA,CAAAkE,IAAA,gBAAApG,MAGA,SAAcA,GAEV,OADAkC,KAAK+b,WAAaje,EACXkC,IACX,GACA,CAAAkE,IAAA,aAAApG,MAGA,SAAWA,GAEP,OADAkC,KAAKgc,QAAUle,EACRkC,IACX,GACA,CAAAkE,IAAA,sBAAApG,MAGA,SAAoBA,GAEhB,OADAkC,KAAKic,iBAAmBne,EACjBkC,IACX,GACA,CAAAkE,IAAA,aAAApG,MAGA,SAAWA,GAEP,OADAkC,KAAKkc,QAAUpe,EACRkC,IACX,GACA,CAAAkE,IAAA,iBAAApG,MAGA,SAAeA,GAEX,OADAkC,KAAKmc,YAAcre,EACZkC,IACX,GACA,CAAAkE,IAAA,YAAApG,MAGA,SAAUA,GAEN,OADAkC,KAAK4b,OAAS9d,EACPkC,IACX,GACA,CAAAkE,IAAA,kBAAApG,MAGA,SAAgBA,GAEZ,OADAkC,KAAKoc,aAAete,EACbkC,IACX,GACA,CAAAkE,IAAA,iBAAApG,MAGA,SAAeue,GAEX,OADArc,KAAKsc,YAAcD,EACZrc,IACX,KAACsb,CAAA,CApFU,CFWH,oBAAAiB,KAAA9Q,EAAAA,EAAAA,GAAA,KAAA8Q,EAAA,CAiBP,OAjBOtQ,EAAAA,EAAAA,GAAAsQ,EAAA,EAAArY,IAAA,4BAAApG,MACR,SAA0B0e,EAAoBC,GAC1C,IAVUpD,EAUJjS,EAAMvD,OAAO6Y,OAAO,CAAC,GAC3B,MAVa,kBADHrD,EAWGmD,IAVYnD,aAAatK,MAsB3BlL,OAAO6Y,OAAO,CAAC,IAXtB7Y,OAAOC,KAAK0Y,GAAoBjV,SAAQ,SAACrD,GACjCuY,EAAUpE,QAAQnU,IAAQ,EAC1BkD,EAAIlD,GAAOsY,EAAmBtY,GAG9ByY,QAAQC,KAAK,wDAAyD1Y,EAE9E,IACOkD,EAKf,KAACmV,CAAA,CAjBO,IGLL,SAASM,EAAU/e,EAAOgf,EAAeC,GAC5C,IAAIC,EAAeF,GAAiB,EAChCG,EAAY5d,OAA8B,qBAAf0d,EAA6BA,EAAa,KACzE,OAAIjf,EAAMwB,OAAS0d,EACR3d,OAAOvB,KAGdkf,GAA8Blf,EAAMwB,QACjB2d,EAAU3d,SACzB2d,GAUZ,SAA8B/a,EAAQgb,GAClC,IAAIC,EAAQD,EACRE,EAAiB,GACrB,KAAOD,EAAQ,GACXC,GAAkBlb,EAClBib,IAEJ,OAAOC,CACX,CAlByBC,CAAqBJ,EAAWD,EAAeC,EAAU3d,SAEnE2d,EAAU/L,MAAM,EAAG8L,GAAgB3d,OAAOvB,GAEzD,CCdA,IACMwf,EAAY,CAAC,EACfC,EAAM,ECCH,SAASC,EAAcC,GAC1B,IAAIC,EAAY,GAGVC,EAA6B,EADrBF,EAAOhf,MAAM,KAAKa,OAG1Bse,ECTH,SAAwBH,GAC3B,GAAIA,EAAOhf,MAAM,KAAKa,OAAS,EAC3B,MAAM,IAAIiC,MAAM,mDAGpB,OAAOkc,EAAOhf,MAAM,KAAKof,UAAU/V,KAAK,IAC5C,CDG2BgW,CAAeL,GAEhCM,EEXH,SAAoBN,GACvB,GAAIA,EAAOhf,MAAM,KAAKa,OAAS,EAC3B,MAAM,IAAIiC,MAAM,mDAGpB,OAAOkc,EAAOhf,MAAM,KAAKC,KAAI,SAACsf,GAE1B,IAAMC,GAAYD,EAClB,GAAI5F,MAAM6F,IAAaA,EAAW,EAC9B,KAAM,kCAEV,OAAOpB,EAAUmB,EAAS,EAAG,IACjC,IAAGlW,KAAK,IACZ,CFFyBoW,CAAWN,GAK5BO,EAHQhgB,SAAS4f,EAAatf,MAAM,KAAKqJ,KAAK,KAG3BgI,SAAS,GAIhC,IAHAqO,EAAetB,EAAUsB,EAAcR,EAAoB,MAG1Cre,OAAS,IAAM,EAC5B,KAAM,yCAOV,OAJA6e,EAAatf,MAAM,WAAW0I,SAAQ,SAAC6W,GAEnCV,GAAaJ,EAAUc,EAC3B,IACOV,CACX,CD7Bc,mEAGRjf,MAAM,IAAI8I,SAAQ,SAAC8W,GACrB,IAAIna,EAAMqZ,EAAIzN,SAAS,GACvB5L,EAAM2Y,EAAU3Y,EAAK,EAAG,KACxBoZ,EAAUpZ,GAAOma,EACjBd,GACJ,IIfA,I,UCQA,SAASe,IACL,IAAMC,EAAgB,QACtB,GAAsB,qBAAX7e,OACP,OAAO6e,EAIP,IACI,OAAOC,QAAQC,SAAShc,MAAQ8b,CAIpC,CAFA,MAAOvD,GACH,OAAOuD,CACX,CAER,CA8CO,SAASG,EAAyBC,GACrC,IACMC,EChEH,SAA6BC,GAChC,IAAMD,EAAmB,CACrBE,UAAWD,EAAQC,UACnBC,YAAaF,EAAQE,YACrBC,QAASH,EAAQG,QACjBC,QAASJ,EAAQI,QACjBthB,QAAS,IACTuhB,OAAQL,EAAQK,OAChBC,UAAWN,EAAQM,WAcvB,OAZIN,EAAQO,gBACRR,EAAiBjhB,QAAU,KAE3BkhB,EAAQQ,WACRT,EAAiBjhB,QAAU,KAE3BkhB,EAAQS,aACRV,EAAiBjhB,QAAU,KAE3BkhB,EAAQU,cACRX,EAAiBjhB,QAAU,KAExBihB,CACX,CDyC6BY,CAxC7B,SAAwCC,GAEpC,IAAMC,EAAW,CACbX,YAAaT,IACbU,QAAS,IACTF,UDnCe,SCmCWrgB,MAAM,KAAK,GACrCwgB,QAAS,IACTC,OAAQ,IACRC,UAAW,MACXG,YAAY,EACZC,aAAa,EACbF,UAAU,EACVD,eAAe,GAEnB,OAAKK,EAIM5b,OAAO6X,OAAO7X,OAAO6X,OAAO,CAAC,EAAGgE,GAAWD,GAH3CC,CAKf,CAmB6BC,CAA+BhB,IAExD,IACI,IAAMiB,EAqBd,SAA+BC,GAC3B,IAAMC,EAAQD,EAAUphB,MAAM,KAC9B,MAAO,GAAP0P,OAAU2R,EAAM,GAAE,KAAA3R,OAAI2R,EAAM,GAChC,CAxB+BC,CAAsBnB,EAAiBG,aACxDiB,EAAoBxC,EAAcoB,EAAiBE,WACnDmB,EAAqBzC,EAAcoC,GACnCM,EEpEP,SAAyBzC,GAC5B,IAAA0C,EAAuB1C,EAAOhf,MAAM,KAAI2hB,GAAAlL,EAAAA,EAAAA,GAAAiL,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAKF,EAAA,GAEbG,EAAqBpiB,SAASkiB,GAAOvQ,SAAS,GAC9C0Q,EAAqBriB,SAASmiB,GAAOxQ,SAAS,GAE9C2Q,EAAcF,EAAmBG,SAAS,EAAG,KAC7CC,EAAcH,EAAmBE,SAAS,EAAG,KACnD,OAAOpD,EAAUmD,GAAenD,EAAUqD,EAC9C,CF2DiCC,CAAgBhC,EAAiBO,WACpD0B,EAAcjC,EAAiBjhB,QAC/BmjB,EAAUlC,EAAiBI,QACzBC,EAAoBL,EAApBK,QAASC,EAAWN,EAAXM,OAEjB,MAAO,GAAP/Q,OADoB,KACCA,OAAG8Q,GAAO9Q,OAAG2S,GAAO3S,OAAG6R,GAAiB7R,OAAG8R,GAAkB9R,OAAG+Q,GAAM/Q,OAAG+R,GAAgB/R,OAAG0S,EAKrH,CAHA,MAAO7F,GAEH,MAAO,GACX,CACJ,CG/EO,IAAM+F,EAAY,CACrB,eAAgB,SAChB,gBAAiB,iBACjB,sBAAuB,uBACvB,aAAc,QACd,eAAgB,UAOdC,EAAc,WAChB,SAAAA,EAAYC,GAAuC,IAA7BC,EAAWvT,UAAArO,OAAA,QAAA2I,IAAA0F,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAG6N,EAAS7N,UAAArO,OAAA,EAAAqO,UAAA,QAAA1F,GAAAwD,EAAAA,EAAAA,GAAA,KAAAuV,GAC7ChhB,KAAKmhB,YAAYF,GACjBjhB,KAAKohB,eAAeF,GACpBlhB,KAAKqhB,aAAa7F,EACtB,CA0NC,OAzNDvP,EAAAA,EAAAA,GAAA+U,EAAA,EAAA9c,IAAA,eAAApG,MAKA,SAAa0d,GAET,OADAxb,KAAKwb,UAAY,IAAIF,EAAUE,GACxBxb,IACX,GACA,CAAAkE,IAAA,iBAAApG,MAKA,SAAeojB,GAKX,OAJAlhB,KAAKshB,UAAYJ,EAAYI,UAC7BthB,KAAKuhB,OAASL,EAAYK,OAC1BvhB,KAAKwhB,UAAYN,EAAYM,UAC7BxhB,KAAKyhB,UAAYP,EAAYO,UACtBzhB,IACX,GACA,CAAAkE,IAAA,cAAApG,MAKA,SAAYmjB,GAGR,OADAjhB,KAAKihB,SAAWA,EAAWA,EAASnR,WAAa,GAC1C9P,IACX,GACA,CAAAkE,IAAA,kBAAApG,MAKA,SAAgB4jB,GAEZ,OADA1hB,KAAKwM,aAAekV,EACb1hB,IACX,GACA,CAAAkE,IAAA,YAAApG,MAKA,SAAU6jB,GAEN,OADA3hB,KAAK4hB,OAASD,EACP3hB,IACX,GACA,CAAAkE,IAAA,eAAApG,MAKA,SAAa+jB,GAET,OADA7hB,KAAK6hB,UAAYA,EACV7hB,IACX,GACA,CAAAkE,IAAA,aAAApG,MAKA,SAAWgkB,GAIP,OAHIA,IACA9hB,KAAK+hB,QAAUD,GAEZ9hB,IACX,GACA,CAAAkE,IAAA,eAAApG,MAKA,SAAa4jB,GAIT,OAHIA,IACA1hB,KAAKgiB,UAAYN,GAEd1hB,IACX,GAAC,CAAAkE,IAAA,OAAApG,MACD,WACI,OAAOkC,IACX,GACA,CAAAkE,IAAA,QAAApG,MAIA,WAA6B,IAAvBmkB,EAAgBtU,UAAArO,OAAA,QAAA2I,IAAA0F,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,OAAO3N,KAAKkiB,oBAAoB,KAAMD,EAAiBxC,iBAC3D,GACA,CAAAvb,IAAA,8BAAApG,MAKA,WACI,GAA8B,qBAAnBkC,KAAKshB,UACZ,KAAM,0DAEV,IAAMa,EAAoBniB,KAAK4hB,QAAU5hB,KAAK4hB,OAAOvJ,QAAQ,MAAQ,EAC/D+J,EAAsBpiB,KAAK4hB,QAAU5hB,KAAK4hB,OAAOvJ,QAAQ,MAAQ,EACvE,GAAI8J,GAAqBC,EACrB,KAAM,qCAEd,GACA,CAAAle,IAAA,kBAAApG,MAMA,WACI,IAAMkkB,ECzFd,SAAyBA,GAErB,OAAKA,GACM,OAGf,CDmF0BK,CAAgBriB,KAAKgiB,WACjCxV,EC/Ed,SAA4BA,GAExB,OAAKA,GACM,QAGf,CDyE6B8V,CAAmBtiB,KAAKwM,cACvC+V,IAAcviB,KAAK4hB,OACnBY,EAAiB,GAAHrU,OAAM6T,EAAS,KAAA7T,OAAI3B,GACjCiW,EAAe1B,EAAU,GAAD5S,OAAI6T,EAAS,KAAA7T,OAAI3B,IACzC2P,EAAcnc,KAAKwb,UAAUW,YAC7BD,EAAUlc,KAAKwb,UAAUU,QAE/B,GAAIC,EAAa,CACb,GAAuB,iBAAnBqG,EACA,MAAO,GAGP,MAAM,IAAIjhB,MAAM,8FAAD4M,OAA+FqU,EAAc,YAEpI,CACA,GAAItG,GAA8B,iBAAnBsG,EACX,MAAO,KAEX,GAAID,EAAW,CACX,GAAIE,EACA,OAAOA,EAGP,MAAM,IAAIlhB,MAAM,iCAAD4M,OAAkCtK,OAAOC,KAAKid,GAAWjZ,KAAK,MAAK,gBAAAqG,OAAeqU,EAAc,YAEvH,CAEA,OAAOA,CACX,GAAC,CAAAte,IAAA,eAAApG,MACD,WACI,OAAIkC,KAAK6hB,UACE,MAAP1T,OAAanO,KAAK6hB,UAAS,MAGpB,EAEf,GACA,CAAA3d,IAAA,sBAAApG,MAMA,SAAoBgW,EAAgB2L,GAEhC,IAAKzf,KAAKihB,SACN,MAAO,GAIXjhB,KAAK0iB,8BACL,IAAMC,EC5Kd,SAAsBrB,EAAW9F,GAC7B,IAAMI,EAASJ,EAAUI,OACnBgH,EAAapH,EAAUO,WACvBF,EAAQL,EAAUK,MAClBC,EAAqBN,EAAUM,mBACrC,OAAKF,GAAWC,EAGZD,IAAWE,GAAsB8G,EAC1B,WAAPzU,OAAkBmT,EAAS,uBAE3B1F,IAAWE,EACJ,8BAAP3N,OAAqCmT,GAErC1F,GAAUE,GAAsB8G,EACzB,WAAPzU,OAAkB2N,GAElBF,GAAUE,EACH,WAAP3N,OAAkB2N,EAAkB,KAAA3N,OAAImT,IAEvC1F,GAAUC,EACJ,UAAP1N,OAAiB0N,EAAK,KAAA1N,OAAImT,GAGnB,QAlBA,6BAAPnT,OAAoCmT,EAoB5C,CDkJuBuB,CAAa7iB,KAAKshB,UAAWthB,KAAKwb,WAC3CsH,EAAuBhP,EAAiBA,EAAehE,WAAa,GACpEiS,ECvHd,SAAuBd,EAAUc,EAAS3F,GACtC,IAAM2G,GAAsC,IAAjB3G,EAC3B,OAAI2F,EACO,IAAP5T,OAAW4T,GCvEZ,SAAiCd,GACpC,OAAOA,EAASpiB,MAAM,WAC1B,CDwEQmkB,CAAwB/B,IE1EzB,SAAeA,GAClB,OAAOA,EAASpiB,MAAM,aAC1B,CFwE6CokB,CAAMhC,IG1E5C,SAAoBA,GACvB,OAAOA,EAAS5I,QAAQ,KAAO,CACnC,CHwEgE6K,CAAWjC,GAC5D,GAEJ8B,EAAqB,KAAO,EACvC,CD6GwBI,CAAcnjB,KAAKihB,SAAUjhB,KAAK+hB,QAAS/hB,KAAKwb,UAAUY,cACpE6E,EAAWjhB,KAAKihB,SACtB,GAA8B,kBAAnBnN,EAIP,MAHY,CAAC6O,EAAQ3iB,KAAKojB,kBAAmBpjB,KAAKqjB,eAAgBP,EAAsBf,EAASd,EAAS1d,QAAQ,KAAM,OAAQvD,KAAK4hB,QAChItR,QAAO,SAAC+I,GAAC,OAAKA,CAAC,IACfvR,KAAK,KAMV,IAAMwb,EAAU,CACZC,UAAUZ,GACV3iB,KAAKojB,kBACLpjB,KAAKqjB,eACLE,UAAUT,GACVf,EACAwB,UAAUtC,GAAU1d,QAAQ,KAAM,OAClCvD,KAAK4hB,QAAU2B,UAAUvjB,KAAK4hB,SAE7BtR,QAAO,SAAC+I,GAAC,OAAKA,CAAC,IACfvR,KAAK,KACLvE,QAAQ,MAAO,OACfA,QAAQ,KAAM,OACbigB,GAAkD,IAA7BxjB,KAAKwb,UAAUiI,YAAyBxC,EAASxQ,SAAS,KACjFiT,EAAoB,GACxB,GAA4C,kBAAhC1jB,KAAKwb,UAAUc,YACvB,IACI,IAAMA,EAAc,IAAIqH,gBAAgB3jB,KAAKwb,UAAUc,aACnDkH,GACAlH,EAAYnH,IAAI,KAAMuJ,EAAyBe,IAEnDiE,EAAoBpH,EAAYxM,UAIpC,CAFA,MAAOxO,GACHqb,QAAQ5I,MAAM,qIAClB,MAGA2P,EAAoB1jB,KAAKwb,UAAUc,aAAe,GAC9CkH,IACAE,GAAqB,GAAJvV,OAAQuV,EAAkBpkB,OAAS,EAAI,IAAM,GAAE,OAAA6O,OAAOuQ,EAAyBe,KAGxG,OAAIiE,EACO,GAAPvV,OAAUmV,EAAO,KAAAnV,OAAIuV,GAGdJ,CAGnB,KAACtC,CAAA,CA/Ne,GKZd4C,EAAuB,SAAAC,IAAAzY,EAAAA,EAAAA,GAAAwY,EAAAC,GAAA,IAAAxY,GAAAC,EAAAA,EAAAA,GAAAsY,GACzB,SAAAA,EAAY3C,EAAUC,EAAa1F,EAAW1H,GAAgB,IAAAtI,EAGrB,OAHqBC,EAAAA,EAAAA,GAAA,KAAAmY,IAE1DpY,EAAAH,EAAAhL,KAAA,KAAM4gB,EAAUC,EAAa1F,IACxB1H,eAAiBA,EAAetI,CACzC,CAsNC,OArNDS,EAAAA,EAAAA,GAAA2X,EAAA,EAAA1f,IAAA,WAAApG,MAKA,SAASgmB,GAEL,OADA9jB,KAAK8T,eAAegQ,SAASA,GACtB9jB,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAOimB,GAEH,OADA/jB,KAAK8T,eAAeiQ,OAAOA,GACpB/jB,IACX,GACA,CAAAkE,IAAA,UAAApG,MAKA,SAAQkmB,GAEJ,OADAhkB,KAAK8T,eAAekQ,QAAQA,GACrBhkB,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAOmmB,GAEH,OADAjkB,KAAK8T,eAAemQ,OAAOA,GACpBjkB,IACX,GACA,CAAAkE,IAAA,UAAApG,MAKA,SAAQiZ,GAEJ,OADA/W,KAAKuZ,UAAU,IAAItM,EAAAA,EAAqB,IAAK8J,IACtC/W,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAOgZ,GAEH,OADA9W,KAAKuZ,UAAU,IAAItM,EAAAA,EAAqB,IAAK6J,IACtC9W,IACX,GACA,CAAAkE,IAAA,eAAApG,MAKA,SAAaomB,GAET,OADAlkB,KAAK8T,eAAeoQ,aAAaA,GAC1BlkB,IACX,GACA,CAAAkE,IAAA,UAAApG,MAIA,SAAQ8b,GAEJ,OADA5Z,KAAK8T,eAAeqQ,QAAQvK,GACrB5Z,IACX,GACA,CAAAkE,IAAA,cAAApG,MAKA,SAAYic,GAER,OADA/Z,KAAK8T,eAAesQ,YAAYrK,GACzB/Z,IACX,GACA,CAAAkE,IAAA,cAAApG,MAKA,SAAYumB,GAER,OADArkB,KAAK8T,eAAewQ,YAAYD,GACzBrkB,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAOymB,GAEH,OADAvkB,KAAK8T,eAAeyQ,OAAOA,GACpBvkB,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAOob,GAEH,OADAlZ,KAAK8T,eAAe0Q,OAAOtL,GACpBlZ,IACX,GACA,CAAAkE,IAAA,SAAApG,MAKA,SAAO2mB,GAEH,OADAzkB,KAAK8T,eAAe2Q,OAAOA,GACpBzkB,IACX,GACA,CAAAkE,IAAA,sBAAApG,MAKA,SAAoBqc,GAEhB,OADAna,KAAK8T,eAAeqG,oBAAoBA,GACjCna,IACX,GACA,CAAAkE,IAAA,WAAApG,MAKA,SAASsc,GAEL,OADApa,KAAK8T,eAAe4Q,SAAStK,GACtBpa,IACX,GACA,CAAAkE,IAAA,kBAAApG,MAKA,SAAgB4H,GAEZ,OADA1F,KAAK8T,eAAe6Q,gBAAgBjf,GAC7B1F,IACX,GACA,CAAAkE,IAAA,WAAApG,MAKA,SAASob,GAEL,OADAlZ,KAAK8T,eAAe8Q,SAAS1L,GACtBlZ,IACX,GACA,CAAAkE,IAAA,UAAApG,MAKA,SAAQob,GAEJ,OADAlZ,KAAK8T,eAAe+Q,QAAQ3L,GACrBlZ,IACX,GACA,CAAAkE,IAAA,UAAApG,MAKA,SAAQuc,GAEJ,OADAra,KAAK8T,eAAe1G,QAAQiN,GACrBra,IACX,GACA,CAAAkE,IAAA,iBAAApG,MAKA,SAAeyc,GAEX,OADAva,KAAK8T,eAAeyG,eAAeA,GAC5Bva,IACX,GACA,CAAAkE,IAAA,YAAApG,MAKA,SAAUob,GAEN,OADAlZ,KAAK8T,eAAeyF,UAAUL,GACvBlZ,IACX,GACA,CAAAkE,IAAA,oBAAApG,MAIA,SAAkBsb,GAEd,OADApZ,KAAK8T,eAAegR,kBAAkB1L,GAC/BpZ,IACX,GACA,CAAAkE,IAAA,WAAApG,MAIA,WACI,OAAOkC,KAAK8T,eAAehE,UAC/B,GACA,CAAA5L,IAAA,WAAApG,MAIA,SAAS+b,GAEL,OADA7Z,KAAK8T,eAAeiR,SAASlL,GACtB7Z,IACX,GAAC,CAAAkE,IAAA,QAAApG,MACD,WAA6B,IAAvBmkB,EAAgBtU,UAAArO,OAAA,QAAA2I,IAAA0F,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtB,OAAO3N,KAAKkiB,oBAAoBliB,KAAK8T,eAAqC,OAArBmO,QAAkD,IAArBA,OAA8B,EAASA,EAAiBxC,iBAC9I,KAACmE,CAAA,CA3NwB,CAAS5C,GCAhCgE,EAAe,SAAAC,IAAA7Z,EAAAA,EAAAA,GAAA4Z,EAAAC,GAAA,IAAA5Z,GAAAC,EAAAA,EAAAA,GAAA0Z,GACjB,SAAAA,EAAY/D,EAAUC,EAAa1F,GAC/B,OAD0C/P,EAAAA,EAAAA,GAAA,KAAAuZ,GAC1C3Z,EAAAhL,KAAA,KACM4gB,EAAUC,EAAa1F,EAAW,IAAIN,EAChD,CAAC,OAAAjP,EAAAA,EAAAA,GAAA+Y,EAAA,CAJgB,CAASpB,GCDxBsB,EAAmB,SAAA/J,IAAA/P,EAAAA,EAAAA,GAAA8Z,EAAA/J,GAAA,IAAA9P,GAAAC,EAAAA,EAAAA,GAAA4Z,GAAA,SAAAA,IAAA,OAAAzZ,EAAAA,EAAAA,GAAA,KAAAyZ,GAAA7Z,EAAAqC,MAAA,KAAAC,UAAA,QAAA1B,EAAAA,EAAAA,GAAAiZ,EAAA,EAASlM,GCC5BmM,EAAe,SAAAF,IAAA7Z,EAAAA,EAAAA,GAAA+Z,EAAAF,GAAA,IAAA5Z,GAAAC,EAAAA,EAAAA,GAAA6Z,GACjB,SAAAA,EAAYlE,EAAUC,EAAa1F,GAAW,IAAAhQ,EAGjB,OAHiBC,EAAAA,EAAAA,GAAA,KAAA0Z,IAE1C3Z,EAAAH,EAAAhL,KAAA,KAAM4gB,EAAUC,EAAa1F,EAAW,IAAI0J,IACvClD,UAAY,QAAQxW,CAC7B,CAkBC,OAjBDS,EAAAA,EAAAA,GAAAkZ,EAAA,EAAAjhB,IAAA,YAAApG,MAKA,SAAUob,GAEN,OADAlZ,KAAK8T,eAAesR,UAAUlM,GACvBlZ,IACX,GACA,CAAAkE,IAAA,YAAApG,MAKA,SAAUob,GAEN,OADAlZ,KAAK8T,eAAeuR,UAAUnM,GACvBlZ,IACX,KAACmlB,CAAA,CAvBgB,CAASvB,GCLxB0B,EAAU,WACZ,SAAAA,EAAYC,IAAkB9Z,EAAAA,EAAAA,GAAA,KAAA6Z,GACtBC,IACAvlB,KAAKulB,iBAAmBA,EAEhC,CAgBC,OAhBAtZ,EAAAA,EAAAA,GAAAqZ,EAAA,EAAAphB,IAAA,QAAApG,MACD,SAAMmjB,GACF,OAAO,IAAI+D,EAAgB/D,EAAUjhB,KAAKulB,iBAAiBC,MAAOxlB,KAAKulB,iBAAiBE,IAC5F,GAAC,CAAAvhB,IAAA,QAAApG,MACD,SAAMmjB,GACF,OAAO,IAAIkE,EAAgBlE,EAAUjhB,KAAKulB,iBAAiBC,MAAOxlB,KAAKulB,iBAAiBE,IAC5F,GAAC,CAAAvhB,IAAA,YAAApG,MACD,SAAUynB,GAEN,OADAvlB,KAAKulB,iBAAmBA,EACjBvlB,IACX,GAAC,CAAAkE,IAAA,YAAApG,MACD,WACI,OAAOkC,KAAKulB,gBAChB,GAAC,CAAArhB,IAAA,eAAApG,MACD,WACI,KACHwnB,CAAA,CArBW,E","sources":["../node_modules/css-mediaquery/index.js","../node_modules/matchmediaquery/index.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/hyphenate-style-name/index.js","../node_modules/shallow-equal/src/objects.ts","../node_modules/react-responsive/src/mediaQuery.ts","../node_modules/react-responsive/src/toQuery.ts","../node_modules/react-responsive/src/Context.ts","../node_modules/react-responsive/src/useMediaQuery.ts","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryQualityAction.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryColorSpaceFromICCAction.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/colorSpace.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryColorSpaceAction.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryDPRAction.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/format/FormatQualifier.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryAction.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/progressive.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/aspectRatio/AspectRatioQualifierValue.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/resize/ResizeSimpleAction.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/GravityQualifier.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/autoGravity/AutoGravity.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/focusOnGravity/FocusOnGravity.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/compassGravity/CompassGravity.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/qualifiers/focusOn/FocusOnValue.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/createGravityModel.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/focusOn.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/autoFocus.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/gravity/qualifiers/compass/CompassQualifier.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/createGravityFromModel.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/resize/ResizeAdvancedAction.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/background/shared/base/BackgroundQualifier.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/resize/ResizePadAction.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/resize/ResizeFillAction.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/resize.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/actionToJson.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/ActionModel.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/Action.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/utils/dataStructureUtils.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/utils/objectFlip.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/internalConstants.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/qualifierToJson.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/QualifierModel.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/qualifier/Qualifier.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/qualifier/QualifierValue.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/utils/prepareColor.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/utils/toFloatAsString.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/utils/unsupportedError.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/flag.js","../node_modules/@cloudinary/transformation-builder-sdk/qualifiers/flag/FlagQualifier.js","../node_modules/@cloudinary/transformation-builder-sdk/actions/background/actions/BackgroundColor.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/RawAction.js","../node_modules/@cloudinary/transformation-builder-sdk/transformation/Transformation.js","../node_modules/@cloudinary/transformation-builder-sdk/internal/models/IErrorObject.js","../node_modules/@cloudinary/transformation-builder-sdk/transformation/ImageTransformation.js","../node_modules/@cloudinary/url-gen/config/BaseConfig.js","../node_modules/@cloudinary/url-gen/internal/internalConstants.js","../node_modules/@cloudinary/url-gen/config/URLConfig.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/stringPad.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/base64Map.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/encodeVersion.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/reverseVersion.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/padVersion.js","../node_modules/@cloudinary/url-gen/internal/utils/packageVersion.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/getSDKAnalyticsSignature.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/getAnalyticsOptions.js","../node_modules/@cloudinary/url-gen/sdkAnalytics/encodeOSVersion.js","../node_modules/@cloudinary/url-gen/assets/CloudinaryFile.js","../node_modules/@cloudinary/url-gen/internal/url/cloudinaryURL.js","../node_modules/@cloudinary/url-gen/internal/url/urlUtils/publicIDContainsVersion.js","../node_modules/@cloudinary/url-gen/internal/url/urlUtils/isUrl.js","../node_modules/@cloudinary/url-gen/internal/url/urlUtils/isFileName.js","../node_modules/@cloudinary/url-gen/assets/CloudinaryTransformable.js","../node_modules/@cloudinary/url-gen/assets/CloudinaryImage.js","../node_modules/@cloudinary/transformation-builder-sdk/transformation/VideoTransformation.js","../node_modules/@cloudinary/url-gen/assets/CloudinaryVideo.js","../node_modules/@cloudinary/url-gen/instance/Cloudinary.js"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\nexports.match = matchQuery;\nexports.parse = parseQuery;\n\n// -----------------------------------------------------------------------------\n\nvar RE_MEDIA_QUERY     = /(?:(only|not)?\\s*([^\\s\\(\\)]+)(?:\\s*and)?\\s*)?(.+)?/i,\n    RE_MQ_EXPRESSION   = /\\(\\s*([^\\s\\:\\)]+)\\s*(?:\\:\\s*([^\\s\\)]+))?\\s*\\)/,\n    RE_MQ_FEATURE      = /^(?:(min|max)-)?(.+)/,\n    RE_LENGTH_UNIT     = /(em|rem|px|cm|mm|in|pt|pc)?$/,\n    RE_RESOLUTION_UNIT = /(dpi|dpcm|dppx)?$/;\n\nfunction matchQuery(mediaQuery, values) {\n    return parseQuery(mediaQuery).some(function (query) {\n        var inverse = query.inverse;\n\n        // Either the parsed or specified `type` is \"all\", or the types must be\n        // equal for a match.\n        var typeMatch = query.type === 'all' || values.type === query.type;\n\n        // Quit early when `type` doesn't match, but take \"not\" into account.\n        if ((typeMatch && inverse) || !(typeMatch || inverse)) {\n            return false;\n        }\n\n        var expressionsMatch = query.expressions.every(function (expression) {\n            var feature  = expression.feature,\n                modifier = expression.modifier,\n                expValue = expression.value,\n                value    = values[feature];\n\n            // Missing or falsy values don't match.\n            if (!value) { return false; }\n\n            switch (feature) {\n                case 'orientation':\n                case 'scan':\n                    return value.toLowerCase() === expValue.toLowerCase();\n\n                case 'width':\n                case 'height':\n                case 'device-width':\n                case 'device-height':\n                    expValue = toPx(expValue);\n                    value    = toPx(value);\n                    break;\n\n                case 'resolution':\n                    expValue = toDpi(expValue);\n                    value    = toDpi(value);\n                    break;\n\n                case 'aspect-ratio':\n                case 'device-aspect-ratio':\n                case /* Deprecated */ 'device-pixel-ratio':\n                    expValue = toDecimal(expValue);\n                    value    = toDecimal(value);\n                    break;\n\n                case 'grid':\n                case 'color':\n                case 'color-index':\n                case 'monochrome':\n                    expValue = parseInt(expValue, 10) || 1;\n                    value    = parseInt(value, 10) || 0;\n                    break;\n            }\n\n            switch (modifier) {\n                case 'min': return value >= expValue;\n                case 'max': return value <= expValue;\n                default   : return value === expValue;\n            }\n        });\n\n        return (expressionsMatch && !inverse) || (!expressionsMatch && inverse);\n    });\n}\n\nfunction parseQuery(mediaQuery) {\n    return mediaQuery.split(',').map(function (query) {\n        query = query.trim();\n\n        var captures    = query.match(RE_MEDIA_QUERY),\n            modifier    = captures[1],\n            type        = captures[2],\n            expressions = captures[3] || '',\n            parsed      = {};\n\n        parsed.inverse = !!modifier && modifier.toLowerCase() === 'not';\n        parsed.type    = type ? type.toLowerCase() : 'all';\n\n        // Split expressions into a list.\n        expressions = expressions.match(/\\([^\\)]+\\)/g) || [];\n\n        parsed.expressions = expressions.map(function (expression) {\n            var captures = expression.match(RE_MQ_EXPRESSION),\n                feature  = captures[1].toLowerCase().match(RE_MQ_FEATURE);\n\n            return {\n                modifier: feature[1],\n                feature : feature[2],\n                value   : captures[2]\n            };\n        });\n\n        return parsed;\n    });\n}\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction toDecimal(ratio) {\n    var decimal = Number(ratio),\n        numbers;\n\n    if (!decimal) {\n        numbers = ratio.match(/^(\\d+)\\s*\\/\\s*(\\d+)$/);\n        decimal = numbers[1] / numbers[2];\n    }\n\n    return decimal;\n}\n\nfunction toDpi(resolution) {\n    var value = parseFloat(resolution),\n        units = String(resolution).match(RE_RESOLUTION_UNIT)[1];\n\n    switch (units) {\n        case 'dpcm': return value / 2.54;\n        case 'dppx': return value * 96;\n        default    : return value;\n    }\n}\n\nfunction toPx(length) {\n    var value = parseFloat(length),\n        units = String(length).match(RE_LENGTH_UNIT)[1];\n\n    switch (units) {\n        case 'em' : return value * 16;\n        case 'rem': return value * 16;\n        case 'cm' : return value * 96 / 2.54;\n        case 'mm' : return value * 96 / 2.54 / 10;\n        case 'in' : return value * 96;\n        case 'pt' : return value * 72;\n        case 'pc' : return value * 72 / 12;\n        default   : return value;\n    }\n}\n","'use strict';\n\nvar staticMatch = require('css-mediaquery').match;\nvar dynamicMatch = typeof window !== 'undefined' ? window.matchMedia : null;\n\n// our fake MediaQueryList\nfunction Mql(query, values, forceStatic){\n  var self = this;\n  var mql;\n\n  // matchMedia will return null in FF when it's called in a hidden iframe\n  // ref: https://stackoverflow.com/a/12330568\n  if(dynamicMatch && !forceStatic) mql = dynamicMatch.call(window, query);\n\n  if (mql) {\n    this.matches = mql.matches;\n    this.media = mql.media;\n    // TODO: is there a time it makes sense to remove this listener?\n    mql.addListener(update);\n  } else {\n    this.matches = staticMatch(query, values);\n    this.media = query;\n  }\n\n  this.addListener = addListener;\n  this.removeListener = removeListener;\n  this.dispose = dispose;\n\n  function addListener(listener){\n    if(mql){\n      mql.addListener(listener);\n    }\n  }\n\n  function removeListener(listener){\n    if(mql){\n      mql.removeListener(listener);\n    }\n  }\n\n  // update ourselves!\n  function update(evt){\n    self.matches = evt.matches;\n    self.media = evt.media;\n  }\n\n  function dispose(){\n    if(mql){\n      mql.removeListener(update);\n    }\n  }\n}\n\nfunction matchMedia(query, values, forceStatic){\n  return new Mql(query, values, forceStatic);\n}\n\nmodule.exports = matchMedia;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/* eslint-disable no-var, prefer-template */\nvar uppercasePattern = /[A-Z]/g\nvar msPattern = /^ms-/\nvar cache = {}\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase()\n}\n\nfunction hyphenateStyleName(name) {\n  if (cache.hasOwnProperty(name)) {\n    return cache[name]\n  }\n\n  var hName = name.replace(uppercasePattern, toHyphenLower)\n  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)\n}\n\nexport default hyphenateStyleName\n","export type validObjectValue = Record<string, any> | null | undefined;\n\nexport default function shallowEqualObjects<T>(\n  objA: validObjectValue,\n  objB: validObjectValue\n): boolean {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (!objA || !objB) {\n    return false;\n  }\n\n  const aKeys = Object.keys(objA);\n  const bKeys = Object.keys(objB);\n  const len = aKeys.length;\n\n  if (bKeys.length !== len) {\n    return false;\n  }\n\n  for (let i = 0; i < len; i++) {\n    const key = aKeys[i];\n\n    if (\n      objA[key] !== objB[key] ||\n      !Object.prototype.hasOwnProperty.call(objB, key)\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import PropTypes from 'prop-types'\n\nconst stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n\n// media types\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n}\n\n// properties that match media queries\nconst matchers = {\n  orientation: PropTypes.oneOf(['portrait', 'landscape']),\n\n  scan: PropTypes.oneOf(['progressive', 'interlace']),\n\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n\n  color: PropTypes.bool,\n\n  colorIndex: PropTypes.bool,\n\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber,\n  type: Object.keys(types)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst { type, ...featureMatchers } = matchers\n\n// media features\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n\n  ...featureMatchers\n}\n\nconst all = { ...types, ...features }\n\nexport default {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n}\n","import hyphenate from 'hyphenate-style-name'\nimport mq from './mediaQuery'\nimport { MediaQueryAllQueryable } from './types'\n\nconst negate = (cond: string) => `not ${cond}`\n\nconst keyVal = (k: string, v: unknown): string => {\n  const realKey = hyphenate(k)\n\n  // px shorthand\n  if (typeof v === 'number') {\n    v = `${v}px`\n  }\n  if (v === true) {\n    return realKey\n  }\n  if (v === false) {\n    return negate(realKey)\n  }\n  return `(${realKey}: ${v})`\n}\n\nconst join = (conds: string[]): string => conds.join(' and ')\n\nconst toQuery = (obj: Partial<MediaQueryAllQueryable>): string => {\n  const rules: string[] = []\n  Object.keys(mq.all).forEach((k) => {\n    const v = obj[k as keyof MediaQueryAllQueryable]\n    if (v != null) {\n      rules.push(keyVal(k, v))\n    }\n  })\n  return join(rules)\n}\n\nexport default toQuery\n","import { createContext } from 'react'\nimport { MediaQueryAllQueryable } from './types'\n\nconst Context = createContext<Partial<MediaQueryAllQueryable> | undefined>(\n  undefined\n)\n\nexport default Context\n","import { useRef, useEffect, useContext, useState } from 'react'\nimport matchMedia from 'matchmediaquery'\nimport hyphenate from 'hyphenate-style-name'\nimport { shallowEqualObjects } from 'shallow-equal'\nimport toQuery from './toQuery'\nimport Context from './Context'\nimport { MediaQueryAllQueryable, MediaQueryMatchers } from './types'\n\ntype MediaQuerySettings = Partial<MediaQueryAllQueryable & { query?: string }>\ntype HyphenateKeyTypes = MediaQueryMatchers | MediaQueryAllQueryable\n\nconst makeQuery = (settings: MediaQuerySettings) =>\n  settings.query || toQuery(settings)\n\nconst hyphenateKeys = (obj?: HyphenateKeyTypes) => {\n  type K = keyof HyphenateKeyTypes\n\n  if (!obj) return undefined\n  const keys = Object.keys(obj) as K[]\n\n  return keys.reduce(\n    (result, key) => {\n      result[hyphenate(key)] = obj[key]\n      return result\n    },\n    {} as Record<string, (typeof obj)[K]>\n  )\n}\n\nconst useIsUpdate = () => {\n  const ref = useRef(false)\n\n  useEffect(() => {\n    ref.current = true\n  }, [])\n\n  return ref.current\n}\n\nconst useDevice = (\n  deviceFromProps?: MediaQueryMatchers\n): Partial<MediaQueryAllQueryable> | undefined => {\n  const deviceFromContext = useContext(Context)\n  const getDevice = () =>\n    hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext)\n  const [device, setDevice] = useState(getDevice)\n\n  useEffect(() => {\n    const newDevice = getDevice()\n    if (!shallowEqualObjects(device, newDevice)) {\n      setDevice(newDevice)\n    }\n  }, [deviceFromProps, deviceFromContext])\n\n  return device\n}\n\nconst useQuery = (settings: MediaQuerySettings) => {\n  const getQuery = () => makeQuery(settings)\n  const [query, setQuery] = useState(getQuery)\n\n  useEffect(() => {\n    const newQuery = getQuery()\n    if (query !== newQuery) {\n      setQuery(newQuery)\n    }\n  }, [settings])\n\n  return query\n}\n\nconst useMatchMedia = (query: string, device?: MediaQueryMatchers) => {\n  const getMatchMedia = () => matchMedia(query, device || {}, !!device)\n  const [mq, setMq] = useState(getMatchMedia)\n  const isUpdate = useIsUpdate()\n\n  useEffect(() => {\n    if (isUpdate) {\n      // skip on mounting, it has already been set\n      const newMq = getMatchMedia()\n      setMq(newMq)\n\n      return () => {\n        if (newMq) {\n          newMq.dispose()\n        }\n      }\n    }\n  }, [query, device])\n\n  return mq\n}\n\nconst useMatches = (mediaQuery: MediaQueryList): boolean => {\n  const [matches, setMatches] = useState<boolean>(mediaQuery.matches)\n\n  useEffect(() => {\n    const updateMatches = (ev: MediaQueryListEvent) => {\n      setMatches(ev.matches)\n    }\n    mediaQuery.addListener(updateMatches)\n    setMatches(mediaQuery.matches)\n\n    return () => {\n      mediaQuery.removeListener(updateMatches)\n    }\n  }, [mediaQuery])\n\n  return matches\n}\n\nconst useMediaQuery = (\n  settings: MediaQuerySettings,\n  device?: MediaQueryMatchers,\n  onChange?: (_: boolean) => void\n) => {\n  const deviceSettings = useDevice(device)\n  const query = useQuery(settings)\n  if (!query) throw new Error('Invalid or missing MediaQuery!')\n  const mq = useMatchMedia(query, deviceSettings)\n  const matches = useMatches(mq as unknown as MediaQueryList)\n  const isUpdate = useIsUpdate()\n\n  useEffect(() => {\n    if (isUpdate && onChange) {\n      onChange(matches)\n    }\n  }, [matches])\n\n  useEffect(\n    () => () => {\n      if (mq) {\n        mq.dispose()\n      }\n    },\n    []\n  )\n\n  return matches\n}\n\nexport default useMediaQuery\n","import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryQualityAction extends DeliveryAction {\n    /**\n     * @param {Qualifiers.Quality} qualityValue a Quality value\n     */\n    constructor(qualityValue) {\n        super('q', qualityValue.toString(), 'level');\n    }\n    /**\n     * Selet the Chroma sub sampling</br>\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\n     * @param {420 | 444 | number} type The chroma sub sampling type\n     */\n    chromaSubSampling(type) {\n        this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\n        const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\n        qualityWithSubSampling.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n    }\n    /**\n     * Controls the final quality by setting a maximum quantization percentage\n     * @param {number} val\n     */\n    quantization(val) {\n        this._actionModel.quantization = val;\n        const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n    }\n    static fromJson(actionModel) {\n        const { level, chromaSubSampling, quantization } = actionModel;\n        const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\n        const result = new this(levelType);\n        if (chromaSubSampling) {\n            //Turn strings like 'CHROMA_420' to 420\n            const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\n            chromaValue && result.chromaSubSampling(+chromaValue);\n        }\n        quantization && result.quantization(quantization);\n        return result;\n    }\n}\nexport { DeliveryQualityAction };\n","import { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Specifies the ICC profile to use for the color space.\n * @memberOf Actions.Delivery\n * @extends SDK.Action\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryColorSpaceFromICCAction extends Action {\n    /**\n     * @param {string} publicId\n     */\n    constructor(publicId) {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'colorSpaceFromICC';\n        this._actionModel.publicId = publicId;\n        const qualifierValue = new QualifierValue(['icc', publicId]).setDelimiter(':');\n        this.addQualifier(new Qualifier('cs', qualifierValue));\n    }\n    static fromJson(actionModel) {\n        const { publicId } = actionModel;\n        return new this(publicId);\n    }\n}\nexport { DeliveryColorSpaceFromICCAction };\n","/**\n * @description Contains functions to select the color space mode.\n * @namespace ColorSpace\n * @memberOf Qualifiers\n * @see Visit {@link Actions.Delivery.colorSpace|Delivery Color Space} for an example\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.ColorSpace\n */\nfunction srgb() {\n    return 'srgb';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.ColorSpace\n */\nfunction trueColor() {\n    return 'srgb:truecolor';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.ColorSpace\n */\nfunction tinySrgb() {\n    return 'tinysrgb';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.ColorSpace\n */\nfunction cmyk() {\n    return 'cmyk';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.ColorSpace\n */\nfunction noCmyk() {\n    return 'no_cmyk';\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.ColorSpace\n */\nfunction keepCmyk() {\n    return 'keep_cmyk';\n}\nconst ColorSpace = {\n    cmyk,\n    keepCmyk,\n    noCmyk,\n    srgb,\n    tinySrgb,\n    trueColor\n};\nexport { ColorSpace, cmyk, keepCmyk, noCmyk, srgb, tinySrgb, trueColor };\n","import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { ColorSpace } from \"../../qualifiers/colorSpace.js\";\nimport { COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP, COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Specifies the color space to use.\n * @memberOf Actions.Delivery\n * @extends SDK.Action\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryColorSpaceAction extends Action {\n    /**\n     * Create a new DeliveryColorSpaceAction\n     * @param mode\n     */\n    constructor(mode) {\n        super();\n        this._actionModel = {};\n        this._actionModel = {\n            actionType: 'colorSpace',\n            mode: (COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP[mode] || mode)\n        };\n        this.addQualifier(new Qualifier('cs', ColorSpace[mode] ? ColorSpace[mode]() : mode));\n    }\n    static fromJson(actionModel) {\n        const { mode } = actionModel;\n        const colorSpaceMode = COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP[mode] || mode;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        return new this(colorSpaceMode);\n    }\n}\nexport { DeliveryColorSpaceAction };\n","import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\n/**\n * @description Specifies the dpr.\n * @memberOf Actions.Delivery\n * @extends SDK.Action\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryDPRAction extends Action {\n    /**\n     * Create a new DeliveryDPRAction\n     * @param dprValue\n     */\n    constructor(dprValue) {\n        super();\n        this._actionModel = { actionType: 'dpr' };\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        const dprAsFloat = toFloatAsString(dprValue);\n        this._actionModel.dpr = dprAsFloat;\n        this.addQualifier(new Qualifier('dpr', dprAsFloat));\n    }\n    static fromJson(actionModel) {\n        const { dpr } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        return new this(dpr);\n    }\n}\nexport { DeliveryDPRAction };\n","/**\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\n * @memberOf Actions\n * @namespace Delivery\n * @example\n * See the examples under every method\n */\nimport { DeliveryFormatAction } from \"./delivery/DeliveryFormatAction.js\";\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQualityAction.js\";\nimport { DeliveryColorSpaceFromICCAction } from \"./delivery/DeliveryColorSpaceFromICCAction.js\";\nimport { DeliveryAction } from \"./delivery/DeliveryAction.js\";\nimport { DeliveryColorSpaceAction } from \"./delivery/DeliveryColorSpaceAction.js\";\nimport { DeliveryDPRAction } from \"./delivery/DeliveryDPRAction.js\";\n/**\n * @summary action\n * @description Defines the format of the delivered asset.\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support|Image formats}\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Video formats}\n *\n * @memberOf Actions.Delivery\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\n * possible values\n * @return {Actions.Delivery.DeliveryFormat}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  format('jpg'),\n * );\n *\n */\nfunction format(format) {\n    return new DeliveryFormatAction('f', format);\n}\n/**\n * @summary action\n * @description Deliver the image in the specified device pixel ratio.\n * @memberOf Actions.Delivery\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {dpr} from \"@cloudinary/url-gen/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  dpr('2.0'),\n * );\n */\nfunction dpr(dpr) {\n    return new DeliveryDPRAction(dpr);\n}\n/**\n * @summary action\n * @description Controls the quality of the delivered image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality|Image quality}\n *  {@link https://cloudinary.com/documentation/video_optimization#how_to_optimize_video_quality|Video quality}\n * @memberOf Actions.Delivery\n * @param {QualityTypes | string | number | Qualifiers.Quality} qualityType For a list of supported quality types see\n * {@link Qualifiers.Quality| quality types} for\n * possible values.\n * @return {Actions.Delivery.DeliveryQualityAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {quality} from \"@cloudinary/url-gen/actions/delivery\";\n * import {quality} from \"@cloudinary/url-gen/qualifiers/quantity\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  quality('auto'),\n * );\n */\nfunction quality(qualityType) {\n    return new DeliveryQualityAction(qualityType);\n}\n/**\n * @summary action\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\n * document to a web image delivery format.\n * @memberOf Actions.Delivery\n * @param {number | string} value The density in dpi.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {density} from \"@cloudinary/url-gen/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  density(150),\n * );\n */\nfunction density(value) {\n    return new DeliveryAction('dn', value, 'density');\n}\n/**\n * @summary action\n * @description Default images can be used in the case that a requested image does not exist.\n * @memberOf Actions.Delivery\n * @param {string} publicIdWithExtension Default image public ID\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {defaultImage} from \"@cloudinary/url-gen/actions/delivery\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  defaultImage('sample'),\n * );\n */\nfunction defaultImage(publicIdWithExtension) {\n    return new DeliveryAction('d', publicIdWithExtension, 'defaultImage');\n}\n/**\n * @summary action\n * @description Controls the color space used for the delivered image.\n * @memberOf Actions.Delivery\n * @param {string | Qualifiers.ColorSpace} mode The color space.\n * @return {Actions.Delivery.DeliveryAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {colorSpace} from \"@cloudinary/url-gen/actions/delivery\";\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  colorSpace(trueColor()),\n * );\n */\nfunction colorSpace(mode) {\n    return new DeliveryColorSpaceAction(mode);\n}\n/**\n * @summary action\n * @description Specifies the ICC profile to use for the color space.\n * The ICC file must be uploaded to your account as a raw, authenticated file.\n * @memberOf Actions.Delivery\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\n * color space.\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {colorSpaceFromICC} from \"@cloudinary/url-gen/actions/delivery\";\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(\n *  colorSpaceFromICC('sample.icc'),\n * );\n */\nfunction colorSpaceFromICC(publicId) {\n    return new DeliveryColorSpaceFromICCAction(publicId);\n}\nconst Delivery = {\n    format,\n    dpr,\n    density,\n    defaultImage,\n    colorSpace,\n    colorSpaceFromICC,\n    quality\n};\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };\n","import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.Format\n * @extends {SDK.QualifierValue}\n */\nclass FormatQualifier extends QualifierValue {\n    constructor(val) {\n        super(val);\n        this.val = val;\n    }\n    getValue() {\n        return this.val;\n    }\n}\nexport { FormatQualifier };\n","import { Action } from \"../../internal/Action.js\";\nimport { FormatQualifier } from \"../../qualifiers/format/FormatQualifier.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { DELIVERY_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Qualifies the delivery of an asset.\n * @memberOf Actions.Delivery\n * @extends SDK.Action\n */\nclass DeliveryAction extends Action {\n    /**\n     * @param {string} deliveryKey A generic Delivery Action Key (such as q, f, dn, etc.)\n     * @param {string} deliveryType A Format Qualifiers for the action, such as Quality.auto()\n     * @param {string} modelProperty internal model property of the action, for example quality uses `level` while dpr uses `density`\n     * @see Visit {@link Actions.Delivery|Delivery} for an example\n     */\n    constructor(deliveryKey, deliveryType, modelProperty) {\n        super();\n        this._actionModel = {};\n        let deliveryTypeValue;\n        if (deliveryType instanceof FormatQualifier) {\n            deliveryTypeValue = deliveryType.getValue();\n        }\n        else {\n            deliveryTypeValue = deliveryType;\n        }\n        this._actionModel.actionType = DELIVERY_MODE_TO_ACTION_TYPE_MAP[deliveryKey];\n        this._actionModel[modelProperty] = deliveryTypeValue;\n        this.addQualifier(new Qualifier(deliveryKey, deliveryType));\n    }\n}\nexport { DeliveryAction };\n","/**\n * @description Contains functions to select the mode when using a progressive format.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/transformation_reference#fl_progressive|Progressive modes}\n * @memberOf Qualifiers\n * @namespace Progressive\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\n * import {jpg} from \"@cloudinary/url-gen/qualifiers/format\";\n * import {steep} from \"@cloudinary/url-gen/qualifiers/progressive\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(format(jpg()).progressive(steep()))\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\nclass ProgressiveQualifier extends FlagQualifier {\n    constructor(mode) {\n        super('progressive', mode);\n    }\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction none() {\n    return new ProgressiveQualifier('none');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction semi() {\n    return new ProgressiveQualifier('semi');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction steep() {\n    return new ProgressiveQualifier('steep');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction progressive() {\n    return new ProgressiveQualifier();\n}\nconst Progressive = {\n    semi,\n    none,\n    steep,\n    progressive,\n    ProgressiveQualifier\n};\nexport { Progressive, semi, none, steep, progressive, ProgressiveQualifier };\n","import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\n/**\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryFormatAction extends DeliveryAction {\n    constructor(deliveryKey, deliveryType) {\n        super(deliveryKey, deliveryType, 'formatType');\n    }\n    /**\n     * @description Uses lossy compression when delivering animated GIF files.\n     * @return {this}\n     */\n    lossy() {\n        this._actionModel.lossy = true;\n        this.addFlag(lossy());\n        return this;\n    }\n    /**\n     * @description Uses progressive compression when delivering JPG file format.\n     * @return {this}\n     */\n    progressive(mode) {\n        if (mode instanceof ProgressiveQualifier) {\n            this._actionModel.progressive = { mode: mode.getFlagValue() };\n            this.addFlag(mode);\n        }\n        else {\n            this._actionModel.progressive = { mode: mode };\n            this.addFlag(progressive(mode));\n        }\n        return this;\n    }\n    /**\n     * @description Ensures that images with a transparency channel are delivered in PNG format.\n     */\n    preserveTransparency() {\n        this._actionModel.preserveTransparency = true;\n        this.addFlag(preserveTransparency());\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { formatType, lossy, progressive, preserveTransparency } = actionModel;\n        let result;\n        if (formatType) {\n            result = new this('f', formatType);\n        }\n        else {\n            result = new this('f');\n        }\n        if (progressive) {\n            if (progressive.mode) {\n                result.progressive(progressive.mode);\n            }\n            else {\n                result.progressive();\n            }\n        }\n        lossy && result.lossy();\n        preserveTransparency && result.preserveTransparency();\n        return result;\n    }\n}\nexport { DeliveryFormatAction };\n","import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.AspectRatio\n * @extends {SDK.QualifierValue}\n */\nexport class AspectRatioQualifierValue extends QualifierValue {\n}\n","import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        this._actionModel = { dimensions: {} };\n        this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n        this.addQualifier(new Qualifier('c', cropType));\n        cropWidth && this.width(cropWidth);\n        cropHeight && this.height(cropHeight);\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        this._actionModel.dimensions.height = x;\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        this._actionModel.dimensions.width = x;\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio|\n      * AspectRatio values}\n     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            this._actionModel.dimensions.aspectRatio = `${ratio}`;\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        this._actionModel.relative = true;\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        this._actionModel.regionRelative = true;\n        return this.addFlag(regionRelative());\n    }\n    static fromJson(actionModel) {\n        const { actionType, dimensions, relative, regionRelative } = actionModel;\n        const { aspectRatio, width, height } = dimensions;\n        const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(cropMode, width, height);\n        aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n        relative && result.relative();\n        regionRelative && result.regionRelative();\n        return result;\n    }\n}\nexport { ResizeSimpleAction };\n","import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Gravity.GravityQualifier\n * @extends {SDK.Qualifier}\n */\nclass GravityQualifier extends Qualifier {\n    /**\n     * @param value, an array containing (GravityObject | AutoGravity | string) or a string;\n     */\n    constructor(value) {\n        super('g', new QualifierValue(value));\n    }\n}\nexport { GravityQualifier };\n","import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the autoGravity builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass AutoGravity extends GravityQualifier {\n    constructor() {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super('auto');\n    }\n    /**\n     * @description Autofocuses on objects, allowing their priority within the algorithm to be configured.\n     * @param {AutoFocus} AutoFocusObjects\n     */\n    autoFocus(...AutoFocusObjects) {\n        this.addValue(AutoFocusObjects);\n        return this;\n    }\n}\nexport { AutoGravity };\n","import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the FocusOn builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass FocusOnGravity extends GravityQualifier {\n    constructor(FocusOnObjects) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(FocusOnObjects);\n    }\n    /**\n     * @description Specifies the gravity to use if none of the other gravity objects are found.\n     * @param {Qualifiers.Gravity.AutoGravity} val\n     */\n    fallbackGravity(val) {\n        /*\n         *  FocusOnGravity(this) is already a qualifier, with a key and a value g_{obj1}\n         *  fallBackGravity also attempts to add a value, to reach the result of g_{obj1}:auto:{obj2}\n         *  Since AutoGravity is a Qualifier, it also comes with its own g_ key, which needs to be removed.\n         *  To solve it, we take only the value from the qualifier, instead of the whole thing\n         */\n        this.addValue(val.qualifierValue);\n        return this;\n    }\n}\nexport { FocusOnGravity };\n","import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the CompassGravity builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass CompassGravity extends GravityQualifier {\n    constructor(dir) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(dir);\n    }\n}\nexport { CompassGravity };\n","import { CompassGravity } from \"./gravity/compassGravity/CompassGravity.js\";\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity.js\";\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity.js\";\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity.js\";\n/**\n * @description Defines the gravity based on directional values from a compass.\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/resizing_and_cropping#control_gravity|Control gravity for images}\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_resizing_and_cropping#control_gravity|Control gravity for videos}\n * @param {Qualifiers.Compass | string} direction A compass Values\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n * @return {CompassGravity}\n */\nfunction compass(direction) {\n    return new CompassGravity(direction);\n}\n/**\n * @summary qualifier\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {focusOn} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(focusOn(cat())))\n * @return {FocusOnGravity}\n */\nfunction focusOn(...args) {\n    const res = [...args];\n    return new FocusOnGravity(res);\n}\n/**\n * @summary qualifier\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\n * @memberOf Qualifiers.Gravity\n * @return {Qualifiers.Gravity.AutoGravity}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity()))\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\n * import {AutoFocus} from \"@cloudinary/url-gen/qualifiers/autoFocus\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\n */\nfunction autoGravity() {\n    return new AutoGravity();\n}\n/**\n * @summary qualifier\n * @description Set the center of gravity to the given x & y coordinates.\n * @memberOf Qualifiers.Gravity\n * @return {XYCenterGravity}\n */\nfunction xyCenter() {\n    return new XYCenterGravity();\n}\n/**\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\n * @namespace Gravity\n * @memberOf Qualifiers\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n *\n * // Expand every function separately to see its own example\n */\nconst Gravity = {\n    compass: compass,\n    autoGravity: autoGravity,\n    focusOn: focusOn,\n    xyCenter\n};\nexport { Gravity, compass, autoGravity, focusOn, xyCenter };\n","import { QualifierValue } from \"../../../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.FocusOn\n * @extends {SDK.QualifierValue}\n */\nclass FocusOnValue extends QualifierValue {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    toString() {\n        return this.name;\n    }\n}\nexport { FocusOnValue };\n","import { AutoGravity } from \"../../qualifiers/gravity/autoGravity/AutoGravity.js\";\nimport { FocusOnGravity } from \"../../qualifiers/gravity/focusOnGravity/FocusOnGravity.js\";\nimport { autoGravity } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue } from \"../../qualifiers/focusOn.js\";\n/**\n * true if gravity starts with 'auto' or 'auto:'\n * @param gravity\n */\nfunction isIAutoGravityString(gravity) {\n    return gravity && `${gravity}`.split(':')[0] === 'auto';\n}\n/**\n * Validate that given val is an ICompassGravity\n * @param gravity\n */\nfunction isCompassGravity(gravity) {\n    //const gravityString = `${(typeof gravity === \"string\" ? gravity : gravity.qualifierValue)}`;\n    const gravityValue = getGravityValue(gravity);\n    return ['north', 'center', 'east', 'west', 'south', 'north_west', 'south_east', 'south_west', 'north_east'].includes(gravityValue);\n}\n/**\n * Get the value of given gravity\n * @param gravity\n */\nfunction getGravityValue(gravity) {\n    return `${gravity}`.replace('g_', '');\n}\n/**\n * Creates a compassGravity model\n * @param gravity\n */\nfunction createCompassGravityModel(gravity) {\n    return {\n        compass: getGravityValue(gravity),\n        gravityType: 'direction'\n    };\n}\n/**\n * Validate that given gravity is an instance of ocr gravity\n * @param gravity\n */\nfunction isOcrGravity(gravity) {\n    return getGravityValue(gravity) === 'ocr_text';\n}\n/**\n * Creates an ocr gravity model\n */\nfunction createOcrGravityModel() {\n    return {\n        gravityType: 'ocr'\n    };\n}\n/**\n * Validate that given gravity is an instance of AutoGravity\n * @param gravity\n */\nfunction isAutoGravity(gravity) {\n    return `${gravity.qualifierValue}`.split(':')[0] === 'auto';\n}\n/**\n * Create an instance of IAutoGravityObjectModel\n * @param gravity\n */\nfunction createIAutoFocusObject(gravity) {\n    const gravityString = gravity.toString();\n    const values = gravityString.split('_');\n    const result = {\n        object: values[0]\n    };\n    if (values.length > 1) {\n        if (values[1] === 'avoid') {\n            result.avoid = true;\n        }\n        else {\n            result.weight = +values[1];\n        }\n    }\n    return result;\n}\n/**\n * Creates an auto gravity model from given AutoGravity\n * @param gravity\n */\nfunction createAutoGravityModel(gravity) {\n    let values;\n    const gravityQualifier = gravity === 'auto' ? new AutoGravity() : gravity;\n    if (`${gravity}`.startsWith('auto:')) {\n        values = `${gravity}`.split(':').filter((v) => v !== 'auto');\n    }\n    else {\n        values = gravityQualifier.qualifierValue.values.filter((v) => v !== 'auto');\n    }\n    const autoFocus = values.map(createIAutoFocusObject);\n    return {\n        gravityType: 'auto',\n        autoFocus\n    };\n}\n/**\n * Create IFocusOnGravityModel from FocusOnGravity\n * @param gravity\n */\nfunction createFocusOnGravityModel(gravity) {\n    const hasAutoGravity = `${gravity}`.split(':').includes('auto');\n    const values = gravity.qualifierValue.values;\n    const focusOnValues = hasAutoGravity ? values.slice(0, values.length - 1) : values;\n    const result = {\n        gravityType: 'object',\n        focusOnObjects: focusOnValues.map((v) => `${v}`)\n    };\n    if (hasAutoGravity) {\n        // Remove the first 'auto' value by slicing it, because it's added by autoGravity()\n        const autoFocusObjects = values[values.length - 1].values.slice(1);\n        const autoGravityInstance = autoGravity().autoFocus(...autoFocusObjects);\n        result.fallbackGravity = createAutoGravityModel(autoGravityInstance);\n    }\n    return result;\n}\n/**\n * Creates a FocusOnGravity from given string\n * @param gravity\n */\nfunction createFocusOnGravity(gravity) {\n    const values = gravity.split(':');\n    const focusOnValues = values.map((g) => new FocusOnValue(g));\n    return new FocusOnGravity(focusOnValues);\n}\n/**\n * Create a model of given gravity\n * @param gravity\n */\nexport function createGravityModel(gravity) {\n    if (isCompassGravity(gravity)) {\n        return createCompassGravityModel(gravity);\n    }\n    if (isOcrGravity(gravity)) {\n        return createOcrGravityModel();\n    }\n    if (isIAutoGravityString(gravity) || isAutoGravity(gravity)) {\n        return createAutoGravityModel(gravity);\n    }\n    return createFocusOnGravityModel(typeof gravity === 'string' ? createFocusOnGravity(gravity) : gravity);\n}\n","import { FocusOnValue } from \"./gravity/qualifiers/focusOn/FocusOnValue.js\";\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects birds\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction bird() {\n    return new FocusOnValue('bird');\n}\n/**\n * @summary qualifier\n * @description Detects dogs\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction dog() {\n    return new FocusOnValue('dog');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects cats\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction cat() {\n    return new FocusOnValue('cat');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects microwaves\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction microwave() {\n    return new FocusOnValue('microwave');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects refrigerators\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction refrigerator() {\n    return new FocusOnValue('refrigerator');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects bottles\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction bottle() {\n    return new FocusOnValue('bottle');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects sinks\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction sink() {\n    return new FocusOnValue('sink');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects skateboards\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction skateboard() {\n    return new FocusOnValue('skateboard');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects people\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction person() {\n    return new FocusOnValue('person');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects the largest face in an image with the Advanced Facial Attribute Detection add-on and makes it the focus of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction advancedFace() {\n    return new FocusOnValue('adv_face');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects all faces in an image with the Advanced Facial Attribute Detection add-on and makes them the focus of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction advancedFaces() {\n    return new FocusOnValue('adv_faces');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects all eyes in an image with the Advanced Facial Attribute Detection add-on and makes them the focus of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction advancedEyes() {\n    return new FocusOnValue('adv_eyes');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects the largest face in the asset and makes it the focus of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction face() {\n    return new FocusOnValue('face');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects all the faces in the asset and makes them the focus of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction faces() {\n    return new FocusOnValue('faces');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects all the faces in the asset and makes them the focus of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction background() {\n    return new FocusOnValue('background');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects aeroplane\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction aeroplane() {\n    return new FocusOnValue('aeroplane');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects bicycle\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction bicycle() {\n    return new FocusOnValue('bicycle');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects boat\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction boat() {\n    return new FocusOnValue('boat');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects bus\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction bus() {\n    return new FocusOnValue('bus');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects car\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction car() {\n    return new FocusOnValue('car');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects chair\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction chair() {\n    return new FocusOnValue('chair');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects cow\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction cow() {\n    return new FocusOnValue('cow');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects diningtable\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction diningtable() {\n    return new FocusOnValue('diningtable');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects horse\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction horse() {\n    return new FocusOnValue('horse');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects motorbike\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction motorbike() {\n    return new FocusOnValue('motorbike');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects pottedplant\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction pottedplant() {\n    return new FocusOnValue('pottedplant');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects sheep\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction sheep() {\n    return new FocusOnValue('sheep');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects sofa\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction sofa() {\n    return new FocusOnValue('sofa');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects train\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction train() {\n    return new FocusOnValue('train');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detects tvmonitor\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction tvmonitor() {\n    return new FocusOnValue('tvmonitor');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.FocusOn\n * @description Detect all text elements in an image using the {@link https://cloudinary.com/documentation/ocr_text_detection_and_extraction_addon|OCR Text Detection and Extraction add-on} and use the detected bounding box coordinates as the basis of the transformation.\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\n */\nfunction ocr() {\n    return new FocusOnValue('ocr_text');\n}\n/**\n * @memberOf Qualifiers\n * @namespace FocusOn\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\nconst FocusOn = {\n    person,\n    cat,\n    microwave,\n    refrigerator,\n    skateboard,\n    bird,\n    bottle,\n    dog,\n    sink,\n    face,\n    train,\n    sofa,\n    sheep,\n    pottedplant,\n    horse,\n    faces,\n    cow,\n    bus,\n    boat,\n    advancedEyes,\n    advancedFace,\n    advancedFaces,\n    aeroplane,\n    background,\n    bicycle,\n    car,\n    chair,\n    diningtable,\n    tvmonitor,\n    motorbike,\n    ocr\n};\nexport { FocusOnValue, FocusOn, person, cat, microwave, refrigerator, skateboard, bird, bottle, dog, sink, face, train, sofa, sheep, pottedplant, horse, faces, cow, bus, boat, advancedEyes, advancedFace, advancedFaces, aeroplane, background, bicycle, car, chair, diningtable, tvmonitor, motorbike, ocr };\n","import { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @summary qualifier\n * @namespace AutoFocus\n * @memberOf Qualifiers\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\n/**\n * @memberOf Qualifiers.AutoFocus\n * @extends {SDK.QualifierValue}\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\n */\nclass AutoFocus extends QualifierValue {\n    constructor(focusOn, weight) {\n        super();\n        this._weight = weight;\n        this.focusOn = focusOn;\n        this.shouldAvoid = false;\n    }\n    /**\n     * @summary qualifier\n     * @description Specifies the object to focus on automatically\n     * Accepts an AutoFocusObject (which is just a wrapper for a FocusOn object, but with extra method: avoid, weight)\n     * @param {Qualifiers.FocusOn} obj The object to focus on.\n     * @param {number} weight\n     */\n    static focusOn(obj, weight) {\n        return new AutoFocus(obj, weight);\n    }\n    shouldAddWeight() {\n        return typeof this._weight === 'number' || typeof this._weight === 'string' || this.shouldAvoid;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the name of the of the object\n     */\n    getName() {\n        return this.focusOn.name;\n    }\n    /**\n     * @summary qualifier\n     * @desc Get the weight for the object\n     */\n    getWeight() {\n        if (this.shouldAvoid) {\n            return 'avoid';\n        }\n        else {\n            return this._weight;\n        }\n    }\n    /**\n     * @summary qualifier\n     * @desc Return the string representation of this QualifierValue\n     */\n    toString() {\n        // Future proofing, in case we'd like to support some custom string in the future, or if data is coming from a DB\n        if (this.shouldAddWeight()) {\n            return `${this.getName()}_${this.getWeight()}`;\n        }\n        else {\n            return `${this.getName()}`;\n        }\n    }\n    /**\n     * @summary qualifier\n     * @description Sets the importance level of the object within the automatic gravity algorithm\n     * @param {numebr} w The focus weight for the object\n     * @return {this}\n     */\n    weight(w) {\n        this._weight = w;\n        return this;\n    }\n    /**\n     * @summary qualifier\n     * @description Attempts to avoid the detected object in the image\n     * @return {this}\n     */\n    avoid() {\n        this.shouldAvoid = true;\n        return this;\n    }\n}\nconst focusOn = AutoFocus.focusOn;\nexport { AutoFocus, focusOn };\n","import { QualifierValue } from \"../../../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Qualifiers.Compass\n * @extends {SDK.QualifierValue}\n */\nclass CompassQualifier extends QualifierValue {\n    constructor(val) {\n        super();\n        this.val = val;\n    }\n    toString() {\n        return this.val;\n    }\n}\nexport { CompassQualifier };\n","import { autoGravity, focusOn } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue, ocr } from \"../../qualifiers/focusOn.js\";\nimport { AutoFocus } from \"../../qualifiers/autoFocus.js\";\nimport { CompassGravity } from \"../../qualifiers/gravity/compassGravity/CompassGravity.js\";\nimport { CompassQualifier } from \"../../qualifiers/gravity/qualifiers/compass/CompassQualifier.js\";\n/**\n * Validates that gravityModel is an ICompassGravityModel\n * @param gravityModel\n */\nfunction isCompassGravityModel(gravityModel) {\n    return gravityModel.gravityType === 'direction';\n}\n/**\n * Validates that gravityModel is an IOcrGravityModel\n * @param gravityModel\n */\nfunction isOcrGravityModel(gravityModel) {\n    return gravityModel.gravityType === 'ocr';\n}\n/**\n * Validates that gravityModel is an IAutoGravityModel\n * @param gravityModel\n */\nfunction isAutoGravityModel(gravityModel) {\n    return gravityModel.gravityType === 'auto';\n}\n/**\n * Create AutoFocus from IAutoGravityObjectModel\n * @param autoGravityObjectModel\n */\nfunction createAutoFocusFromModel(autoGravityObjectModel) {\n    const { object, weight, avoid } = autoGravityObjectModel;\n    const autoFocus = new AutoFocus(new FocusOnValue(object));\n    (weight || weight === 0) && autoFocus.weight(weight);\n    avoid && autoFocus.avoid();\n    return autoFocus;\n}\n/**\n * Create AutoGravity from IAutoGravityModel\n * @param gravityModel\n */\nfunction createAutoGravityFromModel(gravityModel) {\n    const autoFocusModel = gravityModel.autoFocus || [];\n    const autoFocus = autoFocusModel.map(createAutoFocusFromModel);\n    return autoGravity().autoFocus(...autoFocus);\n}\n/**\n * Create FocusOnGravity from given IFocusOnGravityModel\n * @param gravityModel\n */\nfunction createFocusOnGravityFromModel(gravityModel) {\n    const focusOnObjects = (gravityModel.focusOnObjects || []).map((str) => new FocusOnValue(str));\n    const result = focusOn(...focusOnObjects);\n    if (gravityModel.fallbackGravity) {\n        const autoGravity = createAutoGravityFromModel(gravityModel.fallbackGravity);\n        result.fallbackGravity(autoGravity);\n    }\n    return result;\n}\n/**\n * Create gravity instance from given gravity model\n * @param gravityModel\n */\nfunction createGravityFromModel(gravityModel) {\n    if (isCompassGravityModel(gravityModel)) {\n        return new CompassGravity(new CompassQualifier(gravityModel.compass));\n    }\n    if (isOcrGravityModel(gravityModel)) {\n        return focusOn(ocr());\n    }\n    if (isAutoGravityModel(gravityModel)) {\n        return createAutoGravityFromModel(gravityModel);\n    }\n    return createFocusOnGravityFromModel(gravityModel);\n}\nexport { createGravityFromModel };\n","import { ResizeSimpleAction } from \"./ResizeSimpleAction.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { createGravityModel } from \"../../internal/models/createGravityModel.js\";\nimport { createGravityFromModel } from \"../../internal/models/createGravityFromModel.js\";\n/**\n * @description Defines an advanced resize.\n * @extends Actions.Resize.ResizeSimpleAction\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeAdvancedAction extends ResizeSimpleAction {\n    /**\n     * @description Which part of the original image to include.\n     * @param {Qualifiers.Gravity} gravity\n     */\n    gravity(gravity) {\n        this._actionModel.gravity = createGravityModel(gravity);\n        const gravityQualifier = typeof gravity === \"string\" ? new Qualifier('g', gravity) : gravity;\n        return this.addQualifier(gravityQualifier);\n    }\n    static fromJson(actionModel) {\n        const result = super.fromJson.apply(this, [actionModel]);\n        if (actionModel.gravity) {\n            result.gravity(createGravityFromModel(actionModel.gravity));\n        }\n        return result;\n    }\n}\nexport { ResizeAdvancedAction };\n","import { Qualifier } from \"../../../../internal/qualifier/Qualifier.js\";\n/**\n * @description Defines the visual appearance of the background.\n * @memberOf Qualifiers.Background\n * @extends {SDK.Qualifier}\n */\nclass BackgroundQualifier extends Qualifier {\n    constructor(backgroundValue) {\n        // The qualifier key for this qualifier\n        super('b');\n        // Such as color (b_red)\n        if (backgroundValue) {\n            this.addValue(backgroundValue);\n        }\n    }\n}\nexport { BackgroundQualifier };\n","import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\nimport { createBackgroundModel } from \"../../internal/models/createBackgroundModel.js\";\nimport { createBackgroundFromModel } from \"../../internal/models/createBackgroundFromModel.js\";\n/**\n * @description Defines an advanced resize with padding.\n * @extends Actions.Resize.ResizeAdvancedAction\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizePadAction extends ResizeAdvancedAction {\n    /**\n     * @description Sets the background.\n     * @param {Qualifiers.Background} backgroundQualifier Defines the background color to use instead of\n     * transparent background areas or when resizing with padding.\n     */\n    background(backgroundQualifier) {\n        this._actionModel.background = createBackgroundModel(backgroundQualifier);\n        return this.addQualifier(backgroundQualifier);\n    }\n    /**\n     * @description Horizontal position for custom-coordinates based padding.\n     * @param {number} x The x position.\n     */\n    offsetX(x) {\n        this._actionModel.x = x;\n        return this.addQualifier(new Qualifier('x', x));\n    }\n    /**\n     * @description Vertical position for custom-coordinates based padding\n     * @param {number} y The y position.\n     */\n    offsetY(y) {\n        this._actionModel.y = y;\n        return this.addQualifier(new Qualifier('y', y));\n    }\n    static fromJson(actionModel) {\n        const result = super.fromJson.apply(this, [actionModel]);\n        actionModel.background && result.background(createBackgroundFromModel(actionModel.background));\n        actionModel.x && result.offsetX(actionModel.x);\n        actionModel.y && result.offsetY(actionModel.y);\n        actionModel.zoom && result.zoom(actionModel.zoom);\n        return result;\n    }\n}\nexport { ResizePadAction };\n","import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\n/**\n * @description Defines how to crop-fill an asset\n * @extends Actions.Resize.ResizeAdvancedAction\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeFillAction extends ResizeAdvancedAction {\n    /**\n     * @description Absolute X position when used with Gravity.xyCenter {@link Qualifiers.Gravity.GravityQualifier}}\n     * @param {number} x The x position.\n     */\n    x(x) {\n        this._actionModel.x = x;\n        return this.addQualifier(new Qualifier('x', x));\n    }\n    /**\n     * @description Absolute Y position when used with Gravity.xyCenter {@link Qualifiers.Gravity.GravityQualifier}}\n     * @param {number} y The y position.\n     */\n    y(y) {\n        this._actionModel.y = y;\n        return this.addQualifier(new Qualifier('y', y));\n    }\n    static fromJson(actionModel) {\n        const result = super.fromJson.apply(this, [actionModel]);\n        actionModel.x && result.x(actionModel.x);\n        actionModel.y && result.y(actionModel.y);\n        return result;\n    }\n}\nexport { ResizeFillAction };\n","/**\n * @description Determines how to crop, scale, and/or zoom the delivered asset according to the requested dimensions.\n * @memberOf Actions\n * @namespace Resize\n * @see Learn more about Gravity and Focus {@link Qualifiers.Gravity| here }\n * @example\n * <caption> <h4>Scaling an image</h4> </caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {scale, fit, pad, crop} from '@cloudinary/url-gen/actions/resize';\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * image.resize( scale(100, 100) );\n * // All resize actions have a similar interface.\n * // image.resize( fit(100, 100)) );\n * // image.resize( pad(100, 100)) );\n * // image.resize( crop(100, 100)) );\n * // However, Some actions have additional arguments exposed as builder methods.\n * // See the documentation for each method for more information\n *\n *\n * // Alternative syntax, using builder methods\n * image.resize(\n *  scale()\n *    .width(100)\n *    .height(100)\n * );\n * image.toString()\n *\n * @example\n * <caption> <h4>Cropping with automatic focus(Gravity)</h4> </caption>\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n *\n * import {scale} from '@cloudinary/url-gen/actions/resize';\n * import {autoGravity} from '@cloudinary/url-gen/qualifiers/gravity';\n *\n * image.resize( crop(100, 100).gravity(autoGravity()) );\n *\n * // Alternative syntax, using builder methods\n * image.resize(\n *  scale()\n *    .width(100)\n *    .height(100)\n *    .gravity(autoGravity())\n * );\n * image.toString()\n */\nimport { ResizePadAction } from \"./resize/ResizePadAction.js\";\nimport { ResizeSimpleAction } from \"./resize/ResizeSimpleAction.js\";\nimport { ResizeScaleAction } from \"./resize/ResizeScaleAction.js\";\nimport { ThumbResizeAction } from \"./resize/ThumbnailAction.js\";\nimport { ResizeCropAction } from \"./resize/ResizeCropAction.js\";\nimport { ResizeFillAction } from \"./resize/ResizeFillAction.js\";\nimport { ResizeLimitFitAction } from \"./resize/ResizeLimitFitAction.js\";\nimport { ResizeLimitFillAction } from \"./resize/ResizeLimitFillAction.js\";\nimport { ResizeLimitPadAction } from \"./resize/ResizeLimitPadAction.js\";\nimport { ResizeMinimumPadAction } from \"./resize/ResizeMinimumPadAction.js\";\nimport { ResizeAdvancedAction } from \"./resize/ResizeAdvancedAction.js\";\nimport { ResizeAutoPadAction } from \"./resize/ResizeAutoPadAction.js\";\n/**\n * @summary action\n * @description\n * Changes the size of the image exactly to the given width and height without necessarily retaining the original aspect ratio:<br/>\n * all original image parts are visible but might be stretched or shrunk.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ScaleAction}\n */\nfunction scale(width, height) {\n    return new ResizeScaleAction('scale', width, height);\n}\n/**\n * @summary action\n * @description\n * Scales your image based on automatically calculated areas of interest within each specific photo.\n *\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_scale_images|add-on documentation}.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeSimpleAction}\n */\nfunction imaggaScale(width, height) {\n    return new ResizeSimpleAction('imagga_scale', width, height);\n}\n/**\n * @summary action\n * @description\n * Crops your image based on automatically calculated areas of interest within each specific photo.\n *\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_crop_images|add-on documentation}.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeSimpleAction}\n */\nfunction imaggaCrop(width, height) {\n    return new ResizeSimpleAction('imagga_crop', width, height);\n}\n/**\n * @summary action\n * @description Extracts a region of the given width and height out of the original image.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeCropAction}\n */\nfunction crop(width, height) {\n    return new ResizeCropAction('crop', width, height);\n}\n/**\n * @summary action\n * @description\n * Creates an image with the exact given width and height without distorting the image.<br/>\n * This option first scales up or down as much as needed to at least fill both of the given dimensions.<br/><br/>\n * If the requested aspect ratio is different than the original, cropping will occur on the dimension that exceeds the requested size after scaling.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeFillAction}\n */\nfunction fill(width, height) {\n    return new ResizeFillAction('fill', width, height);\n}\n/**\n * @summary action\n * @description\n * The image is resized so that it takes up as much space as possible within a bounding box defined by the given width and height parameters.</br>\n * The original aspect ratio is retained and all of the original image is visible.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeSimpleAction}\n */\nfunction fit(width, height) {\n    return new ResizeSimpleAction('fit', width, height);\n}\n/**\n * @summary action\n * @description\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio.\n *\n * If the proportions of the original asset do not match the given width and height, padding is added to the asset\n * to reach the required size.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizePadAction}\n */\nfunction pad(width, height) {\n    return new ResizePadAction('pad', width, height);\n}\n/**\n * @summary action\n * @description\n * Creates an asset with the exact given width and height without distorting the asset, but only if the original\n * asset is larger than the specified resolution limits.\n *\n * The asset is scaled down to fill the given width and height without distorting the asset, and then the dimension\n * that exceeds the request is cropped. If the original dimensions are both smaller than the requested size, it is\n * not resized at all.\n *\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeLimitFillAction}\n */\nfunction limitFill(width, height) {\n    return new ResizeLimitFillAction('lfill', width, height);\n}\n/**\n * @summary action\n * @description\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\n * width and height parameters, but only if the original asset is larger than the given limit (width and height).\n *\n * The asset is scaled down, the original aspect ratio is retained and all of the original asset is visible.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeSimpleAction}\n */\nfunction limitFit(width, height) {\n    return new ResizeLimitFitAction('limit', width, height);\n}\n/**\n * @summary action\n * @description\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\n * original asset is smaller than the given minimum (width and height).\n *\n * The asset is scaled up.  If the proportions of the original asset do not match the given width and height,\n * padding is added to the asset to reach the required size.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizePadAction}\n */\nfunction minimumPad(width, height) {\n    return new ResizeMinimumPadAction('mpad', width, height);\n}\n/**\n * @summary action\n * @description\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\n * width and height parameters, but only if the original asset is smaller than the given minimum (width and height).\n *\n * The asset is scaled up, the original aspect ratio is retained and all of the original asset is visible.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeSimpleAction}\n */\nfunction minimumFit(width, height) {\n    return new ResizeSimpleAction('mfit', width, height);\n}\n/**\n * @summary action\n * @memberOf Actions.Resize\n * @description\n * Tries to prevent a \"bad crop\" by first attempting to use the fill mode, but adding padding if it is determined\n * that more of the original image needs to be included in the final image.\n *\n * Especially useful if the aspect ratio of the delivered image is considerably different from the original's\n * aspect ratio.\n *\n * Only supported in conjunction with Automatic cropping.\n *\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizePadAction}\n */\nfunction fillPad(width, height) {\n    return new ResizePadAction('fill_pad', width, height);\n}\n/**\n * @summary action\n * @description\n * The thumb cropping mode is specifically used for creating image thumbnails from either face or custom coordinates,</br>\n * and must always be accompanied by the gravity parameter set to one of the face detection or custom values.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ThumbResizeAction}\n */\nfunction thumbnail(width, height) {\n    return new ThumbResizeAction('thumb', width, height);\n}\n/**\n * @summary action\n * @description\n * Automatically determines the best crop based on the gravity and specified dimensions.\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ThumbResizeAction}\n */\nfunction auto(width, height) {\n    return new ResizeAdvancedAction('auto', width, height);\n}\n/**\n * @summary action\n * @description\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\n * original asset is larger than the given limit (width and height).\n *\n * The asset is scaled down.  If the proportions of the original asset do not match the given width and height,\n * padding is added to the asset to reach the required size.\n *\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizePadAction}\n */\nfunction limitPad(width, height) {\n    return new ResizeLimitPadAction('lpad', width, height);\n}\n/**\n * @summary action\n * @description\n * Tries to prevent a \"bad crop\" by first attempting to use the auto cropping mode, but adding some padding\n * if the algorithm determines that more of the original image needs to be included in the final image.\n *\n * @memberOf Actions.Resize\n * @param {number|string} width The required width of a transformed asset.\n * @param {number|string} height The required height of a transformed asset.\n * @return {Actions.Resize.ResizeAutoPadAction}\n */\nfunction autoPad(width, height) {\n    return new ResizeAutoPadAction('auto_pad', width, height);\n}\nconst Resize = {\n    imaggaScale,\n    imaggaCrop,\n    crop,\n    fill,\n    scale,\n    minimumPad,\n    fit,\n    pad,\n    limitFit,\n    thumbnail,\n    limitFill,\n    minimumFit,\n    limitPad,\n    fillPad,\n    auto,\n    autoPad\n};\nexport { Resize, imaggaScale, imaggaCrop, crop, fill, scale, minimumPad, fit, pad, limitFit, thumbnail, limitFill, minimumFit, limitPad, fillPad, auto, autoPad };\n","import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function actionToJson() {\n    var _a, _b, _c;\n    const actionModelIsNotEmpty = this._actionModel && Object.keys(this._actionModel).length;\n    const sourceTransformationError = (_c = (_b = (_a = this._actionModel) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.transformation) === null || _c === void 0 ? void 0 : _c.error;\n    // Should return error when there is unsupported transformation inside\n    if (sourceTransformationError && sourceTransformationError instanceof Error) {\n        return { error: sourceTransformationError };\n    }\n    if (actionModelIsNotEmpty) {\n        return this._actionModel;\n    }\n    return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\n}\n","import { actionToJson } from \"./actionToJson.js\";\nexport class ActionModel {\n    constructor() {\n        this._actionModel = {};\n    }\n    toJson() {\n        return actionToJson.apply(this);\n    }\n}\n","import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { ActionModel } from \"./models/ActionModel.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\nclass Action extends ActionModel {\n    constructor() {\n        super(...arguments);\n        // We're using map, to overwrite existing keys. for example:\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n        this.qualifiers = new Map();\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n        // So flags are stored separately until the very end because of that reason\n        this.flags = [];\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n        this.actionTag = ''; // A custom name tag to identify this action in the future\n    }\n    prepareQualifiers() { }\n    /**\n     * @description Returns the custom name tag that was given to this action\n     * @return {string}\n     */\n    getActionTag() {\n        return this.actionTag;\n    }\n    /**\n     * @description Sets the custom name tag for this action\n     * @return {this}\n     */\n    setActionTag(tag) {\n        this.actionTag = tag;\n        return this;\n    }\n    /**\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n     * @return {string}\n     */\n    toString() {\n        this.prepareQualifiers();\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n    }\n    /**\n     * @description Adds the parameter to the action.\n     * @param {SDK.Qualifier} qualifier\n     * @return {this}\n     */\n    addQualifier(qualifier) {\n        // if string, find the key and value\n        if (typeof qualifier === 'string') {\n            const [key, value] = qualifier.toLowerCase().split('_');\n            if (key === 'fl') {\n                // if string qualifier is a flag, store it in the flags arrays\n                this.flags.push(new FlagQualifier(value));\n            }\n            else {\n                // if the string qualifier is not a flag, create a new qualifier from it\n                this.qualifiers.set(key, new Qualifier(key, value));\n            }\n        }\n        else {\n            // if a qualifier object, insert to the qualifiers map\n            this.qualifiers.set(qualifier.key, qualifier);\n        }\n        return this;\n    }\n    /**\n     * @description Adds a flag to the current action.\n     * @param {Qualifiers.Flag} flag\n     * @return {this}\n     */\n    addFlag(flag) {\n        if (typeof flag === 'string') {\n            this.flags.push(new FlagQualifier(flag));\n        }\n        else {\n            if (flag instanceof FlagQualifier) {\n                this.flags.push(flag);\n            }\n        }\n        return this;\n    }\n    addValueToQualifier(qualifierKey, qualifierValue) {\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n        return this;\n    }\n}\nexport { Action };\n","/**\n * Sort a map by key\n * @private\n * @param map <string, any>\n * @Return array of map's values sorted by key\n */\nfunction mapToSortedArray(map, flags) {\n    const array = Array.from(map.entries());\n    // objects from the Array.from() method above are stored in array of arrays:\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\n    // Flags is an array of FlagQualifierObj\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\n    flags.forEach((flag) => {\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\n    });\n    return array.sort().map((v) => v[1]);\n}\n/**\n * Checks if `value` is a string.\n * @private\n * @param {*} value The value to check.\n * @return {boolean} `true` if `value` is a string, else `false`.\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\nexport { isString, mapToSortedArray };\n","/**\n * Flip keys and values for given object\n * @param obj\n */\nfunction objectFlip(obj) {\n    const result = {};\n    Object.keys(obj).forEach((key) => {\n        result[obj[key]] = key;\n    });\n    return result;\n}\nexport { objectFlip };\n","/**\n * This file is for internal constants only.\n * It is not intended for public use and is not part of the public API\n */\nimport { objectFlip } from \"./utils/objectFlip.js\";\nexport const CONDITIONAL_OPERATORS = {\n    \"=\": \"eq\",\n    \"!=\": \"ne\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    \"<=\": \"lte\",\n    \">=\": \"gte\",\n    \"&&\": \"and\",\n    \"||\": \"or\",\n    \"*\": \"mul\",\n    \"/\": \"div\",\n    \"+\": \"add\",\n    \"-\": \"sub\",\n    \"^\": \"pow\"\n};\nexport const RESERVED_NAMES = {\n    \"aspect_ratio\": \"ar\",\n    \"aspectRatio\": \"ar\",\n    \"current_page\": \"cp\",\n    \"currentPage\": \"cp\",\n    \"duration\": \"du\",\n    \"face_count\": \"fc\",\n    \"faceCount\": \"fc\",\n    \"height\": \"h\",\n    \"initial_aspect_ratio\": \"iar\",\n    \"initial_height\": \"ih\",\n    \"initial_width\": \"iw\",\n    \"initialAspectRatio\": \"iar\",\n    \"initialHeight\": \"ih\",\n    \"initialWidth\": \"iw\",\n    \"initial_duration\": \"idu\",\n    \"initialDuration\": \"idu\",\n    \"page_count\": \"pc\",\n    \"page_x\": \"px\",\n    \"page_y\": \"py\",\n    \"pageCount\": \"pc\",\n    \"pageX\": \"px\",\n    \"pageY\": \"py\",\n    \"tags\": \"tags\",\n    \"width\": \"w\",\n    \"trimmed_aspect_ratio\": \"tar\",\n    \"current_public_id\": \"cpi\",\n    \"initial_density\": \"idn\",\n    \"page_names\": \"pgnames\"\n};\nexport const ACTION_TYPE_TO_CROP_MODE_MAP = {\n    limitFit: 'limit',\n    limitFill: 'lfill',\n    minimumFit: 'mfit',\n    thumbnail: 'thumb',\n    limitPad: 'lpad',\n    minimumPad: 'mpad',\n    autoPad: 'auto_pad'\n};\nexport const ACTION_TYPE_TO_DELIVERY_MODE_MAP = {\n    colorSpace: 'cs',\n    dpr: 'dpr',\n    density: 'dn',\n    defaultImage: 'd',\n    format: 'f',\n    quality: 'q'\n};\nexport const ACTION_TYPE_TO_EFFECT_MODE_MAP = {\n    redEye: 'redeye',\n    advancedRedEye: 'adv_redeye',\n    oilPaint: 'oil_paint',\n    unsharpMask: 'unsharp_mask',\n    makeTransparent: 'make_transparent',\n    generativeRestore: 'gen_restore',\n    upscale: 'upscale'\n};\nexport const ACTION_TYPE_TO_QUALITY_MODE_MAP = {\n    autoBest: 'auto:best',\n    autoEco: 'auto:eco',\n    autoGood: 'auto:good',\n    autoLow: 'auto:low',\n    jpegminiHigh: 'jpegmini:1',\n    jpegminiMedium: 'jpegmini:2',\n    jpegminiBest: 'jpegmini:0'\n};\nexport const ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP = {\n    fullHd: 'full_hd',\n    fullHdWifi: 'full_hd_wifi',\n    fullHdLean: 'full_hd_lean',\n    hdLean: 'hd_lean'\n};\nexport const CHROMA_VALUE_TO_CHROMA_MODEL_ENUM = {\n    444: \"CHROMA_444\",\n    420: \"CHROMA_420\"\n};\nexport const COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP = {\n    'noCmyk': 'no_cmyk',\n    'keepCmyk': 'keep_cmyk',\n    'tinySrgb': 'tinysrgb',\n    'srgbTrueColor': 'srgb:truecolor'\n};\nexport const ACTION_TYPE_TO_BLEND_MODE_MAP = {\n    'antiRemoval': 'anti_removal'\n};\nexport const CHROMA_MODEL_ENUM_TO_CHROMA_VALUE = objectFlip(CHROMA_VALUE_TO_CHROMA_MODEL_ENUM);\nexport const COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP = objectFlip(COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP);\nexport const CROP_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_CROP_MODE_MAP);\nexport const DELIVERY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_DELIVERY_MODE_MAP);\nexport const EFFECT_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_EFFECT_MODE_MAP);\nexport const QUALITY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_QUALITY_MODE_MAP);\nexport const STREAMING_PROFILE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP);\n","import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function qualifierToJson() {\n    return this._qualifierModel || { error: createUnsupportedError(`unsupported qualifier ${this.constructor.name}`) };\n}\n","import { qualifierToJson } from \"./qualifierToJson.js\";\nexport class QualifierModel {\n    constructor() {\n        this._qualifierModel = {};\n    }\n    toJson() {\n        return qualifierToJson.apply(this);\n    }\n}\n","import { QualifierValue } from './QualifierValue.js';\nimport { QualifierModel } from '../models/QualifierModel.js';\n/**\n * @summary SDK\n * @memberOf SDK\n */\nclass Qualifier extends QualifierModel {\n    constructor(key, qualifierValue) {\n        super();\n        this.delimiter = '_'; // {key}{delimiter}{qualifierValue}\n        this.key = key;\n        if (qualifierValue instanceof QualifierValue) {\n            this.qualifierValue = qualifierValue;\n        }\n        else {\n            this.qualifierValue = new QualifierValue();\n            this.qualifierValue.addValue(qualifierValue);\n        }\n    }\n    toString() {\n        const { key, delimiter, qualifierValue } = this;\n        return `${key}${delimiter}${qualifierValue.toString()}`;\n    }\n    addValue(value) {\n        this.qualifierValue.addValue(value);\n        return this;\n    }\n}\nexport { Qualifier };\n","/**\n * @summary SDK\n * @memberOf SDK\n */\nclass QualifierValue {\n    /**\n     *\n     * @param {QualifierValue | QualifierValue[] | any[] | string | number}qualifierValue\n     */\n    constructor(qualifierValue) {\n        this.values = [];\n        this.delimiter = ':'; // {value}{delimiter}{value}...\n        if (this.hasValue(qualifierValue)) {\n            this.addValue(qualifierValue);\n        }\n    }\n    /**\n     * @description Joins the provided values with the provided delimiter\n     */\n    toString() {\n        return this.values.join(this.delimiter);\n    }\n    /**\n     * @description Checks if the provided argument has a value\n     * @param {any} v\n     * @private\n     * @return {boolean}\n     */\n    hasValue(v) {\n        return typeof v !== 'undefined' && v !== null && v !== '';\n    }\n    /**\n     * @desc Adds a value for the this qualifier instance\n     * @param {any} value\n     * @return {this}\n     */\n    addValue(value) {\n        // Append value or array of values\n        if (Array.isArray(value)) {\n            this.values = this.values.concat(value);\n        }\n        else {\n            this.values.push(value);\n        }\n        // Remove falsy values\n        this.values = this.values.filter((v) => this.hasValue(v));\n        return this;\n    }\n    /**\n     * @description Sets the delimiter for this instance\n     * @param delimiter\n     */\n    setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n        return this;\n    }\n}\nexport { QualifierValue };\n","/**\n * Returns RGB or Color\n * @private\n * @param color\n */\nexport function prepareColor(color) {\n    if (color) {\n        return color.match(/^#/) ? `rgb:${color.substr(1)}` : color;\n    }\n    else {\n        return color;\n    }\n}\n","/**\n * @description\n * Returns a string representing the float value of the input, if the input was a number-like.\n * Examples:\n * - '1.0' -> '1.0'\n * - 1 -> '1.0'\n * - '5' -> '5.0'\n * - 'auto' -> 'auto'\n * @private\n * @param {string|number} value\n * @return {string}\n */\nexport function toFloatAsString(value) {\n    // Turn the input to string\n    // The Function will return `returnValue` value if the input is not a number-like expression\n    const returnValue = value.toString();\n    // if the string contains letters, return the input\n    if (returnValue.match(/[A-Z]/gi)) {\n        return returnValue;\n    }\n    // If the leading digit is 0, and we have more than 1 digit, it's not a number.\n    // 00, 00000, 0x15 etc.\n    if (returnValue.length > 1 && returnValue[0] === '0') {\n        return returnValue;\n    }\n    // Final sanity check, parse the number as a float and check if its NaN\n    const isNumberLike = !isNaN(parseFloat(returnValue)) && returnValue.indexOf(':') === -1;\n    // If it's a number-like, but the input does not contain a decimal - add it.\n    if (isNumberLike && returnValue.indexOf('.') === -1) {\n        return `${returnValue}.0`;\n    }\n    else {\n        // If the input already contains a decimal, just return the value\n        return returnValue;\n    }\n}\n","class UnsupportedError extends Error {\n    constructor(message = 'Unsupported') {\n        super(message);\n    }\n}\n/**\n * Creates a new UnsupportedError\n * @param message\n */\nfunction createUnsupportedError(message) {\n    return new UnsupportedError(message);\n}\nexport { UnsupportedError, createUnsupportedError };\n","/**\n * @description Defines flags that you can use to alter the default transformation behavior.\n * @namespace Flag\n * @memberOf Qualifiers\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\n * Plays all frames rather than just delivering the first one as a static image.\n * Use this flag in addition to the flag or parameter controlling the delivery format,\n * for example f_auto or fl_awebp.\n\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animated() {\n    return new FlagQualifier('animated');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated WebPs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animatedWebP() {\n    return new FlagQualifier('awebp');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used together with automatic quality (q_auto):\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction anyFormat() {\n    return new FlagQualifier('any_format');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated PNGs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animatedPng() {\n    return new FlagQualifier('apng');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image\n * (e.g., manually created using PhotoShop).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction clip() {\n    return new FlagQualifier('clip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\n * using PhotoShop)\n * using an evenodd clipping rule.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction clipEvenOdd() {\n    return new FlagQualifier('clip_evenodd');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\n * transformation.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction forceStrip() {\n    return new FlagQualifier('force_strip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Allows custom flag\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction custom(value) {\n    return new FlagQualifier(value);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction forceIcc() {\n    return new FlagQualifier('force_icc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Delivers the image as an attachment.\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction attachment(filename) {\n    return new FlagQualifier('attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\n * transformed image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction getInfo() {\n    return new FlagQualifier('getinfo');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\n * Delivering in this format requires a private CDN configuration.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction hlsv3() {\n    return new FlagQualifier('hlsv3');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Sets the cache-control to immutable for the asset.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction immutableCache() {\n    return new FlagQualifier('immutable_cache');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\n * recalculated to maintain the aspect ratio of the original image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction ignoreInitialAspectRatio() {\n    return new FlagQualifier('ignore_aspect_ratio');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps the copyright related fields when stripping meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepAttribution() {\n    return new FlagQualifier('keep_attribution');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * Keep the Display Aspect Ratio metadata of the uploaded video (if it’s different from the current video\n * dimensions).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepDar() {\n    return new FlagQualifier('keep_dar');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps all meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepIptc() {\n    return new FlagQualifier('keep_iptc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\n * overlay or underlay instead of applying on the containing image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction layerApply() {\n    return new FlagQualifier('layer_apply');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Automatically use lossy compression when delivering animated GIF files.\n *\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\n * format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction lossy() {\n    return new FlagQualifier('lossy');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Convert the audio channel to mono\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction mono() {\n    return new FlagQualifier('mono');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction noOverflow() {\n    return new FlagQualifier('no_overflow');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction noStream() {\n    return new FlagQualifier('no_stream');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png24 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png24() {\n    return new FlagQualifier('png24');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png32 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png32() {\n    return new FlagQualifier('png32');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the PNG8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png8() {\n    return new FlagQualifier('png8');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\n * delivered in PNG format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction preserveTransparency() {\n    return new FlagQualifier('preserve_transparency');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\n *\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\n * image is loaded.\n *\n * @param {string} mode? The mode to determine a specific progressive outcome as follows:\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\n *          (less iterations). This is the default mode when using q_auto.\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\n *           the required resolution.\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\n *           a specific value for quality.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction progressive(mode) {\n    return new FlagQualifier('progressive', mode);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction regionRelative() {\n    return new FlagQualifier('region_relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\n * order to enable\n * PDF resizing and overlay manipulations.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction rasterize() {\n    return new FlagQualifier('rasterize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction relative() {\n    return new FlagQualifier('relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction sanitize() {\n    return new FlagQualifier('sanitize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\n * overlay.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction splice() {\n    return new FlagQualifier('splice');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction stripProfile() {\n    return new FlagQualifier('strip_profile');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description If the requested video transformation has already been generated, this flag works identically to\n * Flag::attachment.\n *\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\n * to begin immediately, streaming it as a fragmented video file.\n *\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\n * the download will begin only after the complete transformed video has been generated.\n *\n * Most standard video players successfully play fragmented video files without issue.\n *\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction streamingAttachment(filename) {\n    return new FlagQualifier('streaming_attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction tiff8Lzw() {\n    return new FlagQualifier('tiff8_lzw');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction tiled() {\n    return new FlagQualifier('tiled');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\n * includes a directive to play only a section of the video).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction truncateTS() {\n    return new FlagQualifier('truncate_ts');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction waveform() {\n    return new FlagQualifier('waveform');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction ignoreMaskChannels() {\n    return new FlagQualifier('ignore_mask_channels');\n}\nconst Flag = {\n    animated, anyFormat, animatedPng, animatedWebP,\n    clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize,\n    sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache,\n    keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono,\n    layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip,\n    tiled, noOverflow, ignoreMaskChannels\n};\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };\n","import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Flag\n * @extends {SDK.Qualifier}\n * @description the FlagQualifier class\n */\nclass FlagQualifier extends Qualifier {\n    constructor(flagType, flagValue) {\n        let qualifierValue;\n        if (flagValue) {\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = flagType;\n        }\n        super('fl', qualifierValue);\n        this.flagValue = flagValue;\n    }\n    toString() {\n        return super.toString().replace(/\\./g, '%2E');\n    }\n    getFlagValue() {\n        return this.flagValue;\n    }\n}\nexport { FlagQualifier };\n","import { Action } from \"../../../internal/Action.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @extends SDK.Action\n * @description A class for background transformations.\n */\nclass BackgroundColor extends Action {\n    constructor(color) {\n        super();\n        this._actionModel = {};\n        this.addQualifier(new Qualifier('b', new QualifierValue(prepareColor(color)).setDelimiter('_')));\n        this._actionModel.color = color;\n        this._actionModel.actionType = 'backgroundColor';\n    }\n    static fromJson(actionModel) {\n        const { color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(color);\n        return result;\n    }\n}\nexport { BackgroundColor };\n","import { createUnsupportedError } from \"./utils/unsupportedError.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines an action that's a string literal, no validations or manipulations are performed\n */\nclass RawAction {\n    constructor(raw) {\n        this.raw = raw;\n    }\n    toString() {\n        return this.raw;\n    }\n    toJson() {\n        return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\n    }\n}\nexport { RawAction };\n","import { Action } from \"../internal/Action.js\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { RawAction } from \"../internal/RawAction.js\";\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/url-gen\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Delivers an animated GIF.\n     * @param {AnimatedAction} animatedAction\n     * @return {this}\n     */\n    animated(animatedAction) {\n        return this.addAction(animatedAction);\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n    quality(quality) {\n        this.addAction(new DeliveryFormatAction('q', quality));\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n    format(format) {\n        this.addAction(new DeliveryFormatAction('f', format));\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(color));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n    toJson() {\n        const actions = [];\n        for (const action of this.actions) {\n            const json = action.toJson();\n            if (isErrorObject(json)) {\n                // Fail early and return an IErrorObject\n                return json;\n            }\n            actions.push(json);\n        }\n        return { actions };\n    }\n}\nexport { Transformation };\n","/**\n * Validates obj is an instance of IErrorObject\n * @param obj\n */\nfunction isErrorObject(obj) {\n    const errorObj = obj;\n    return ('error' in errorObj) && !!errorObj.error;\n}\nexport { isErrorObject };\n","import { Transformation } from \"./Transformation.js\";\n/**\n * @summary SDK\n * @extends {SDK.Transformation}\n * @memberOf SDK\n */\nclass ImageTransformation extends Transformation {\n}\nexport { ImageTransformation };\n","/**\n *\n * @private\n * @param {any} a\n */\nfunction isObject(a) {\n    if (typeof a !== 'object' || a instanceof Array) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nclass Config {\n    filterOutNonSupportedKeys(userProvidedConfig, validKeys) {\n        const obj = Object.create({});\n        if (isObject(userProvidedConfig)) {\n            Object.keys(userProvidedConfig).forEach((key) => {\n                if (validKeys.indexOf(key) >= 0) {\n                    obj[key] = userProvidedConfig[key];\n                }\n                else {\n                    console.warn('Warning - unsupported key provided to configuration: ', key);\n                }\n            });\n            return obj;\n        }\n        else {\n            return Object.create({});\n        }\n    }\n}\nexport default Config;\n","/**\n * This file is for internal constants only.\n * It is not intended for public use and is not part of the public API\n */\n/**\n * @private\n */\nexport const ALLOWED_URL_CONFIG = [\n    'cname',\n    'secureDistribution',\n    'privateCdn',\n    'signUrl',\n    'longUrlSignature',\n    'shorten',\n    'useRootPath',\n    'secure',\n    'forceVersion',\n    'analytics',\n    'queryParams'\n];\n/**\n * @private\n */\nexport const ALLOWED_CLOUD_CONFIG = [\n    'cloudName',\n    'apiKey',\n    'apiSecret',\n    'authToken'\n];\n","import Config from \"./BaseConfig.js\";\nimport { ALLOWED_URL_CONFIG } from \"../internal/internalConstants.js\";\nclass URLConfig extends Config {\n    /**\n     * @param {IURLConfig} userURLConfig\n     */\n    constructor(userURLConfig) {\n        super();\n        const urlConfig = this.filterOutNonSupportedKeys(userURLConfig, ALLOWED_URL_CONFIG);\n        Object.assign(this, {\n            secure: true\n        }, urlConfig);\n    }\n    extend(userURLConfig) {\n        const urlConfig = this.filterOutNonSupportedKeys(userURLConfig, ALLOWED_URL_CONFIG);\n        return new URLConfig(Object.assign({}, this, urlConfig));\n    }\n    /**\n     * @param {string} value Sets the cname\n     */\n    setCname(value) {\n        this.cname = value;\n        return this;\n    }\n    /**\n     * @param {string} value Sets the secureDistribution\n     */\n    setSecureDistribution(value) {\n        this.secureDistribution = value;\n        return this;\n    }\n    /**\n     * @param {boolean} value Sets whether to use a private CDN (Removes cloudName from URL)\n     */\n    setPrivateCdn(value) {\n        this.privateCdn = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to sign the URL\n     */\n    setSignUrl(value) {\n        this.signUrl = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to use a long signature\n     */\n    setLongUrlSignature(value) {\n        this.longUrlSignature = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to shorten the URL\n     */\n    setShorten(value) {\n        this.shorten = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to use a root path\n     */\n    setUseRootPath(value) {\n        this.useRootPath = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether or not to deliver the asset through https\n     */\n    setSecure(value) {\n        this.secure = value;\n        return this;\n    }\n    /**\n     * @param value Sets whether to force a version in the URL\n     */\n    setForceVersion(value) {\n        this.forceVersion = value;\n        return this;\n    }\n    /**\n     * @param params Sets additional params\n     */\n    setQueryParams(params) {\n        this.queryParams = params;\n        return this;\n    }\n}\nexport default URLConfig;\n","/**\n * @private\n * @description Adds left padding to a string with the desired substring the provided number of times\n * @example stringPad(foo, 3, 'a'') // -> aaafoo\n * @param {string} value\n * @param {number} _targetLength\n * @param {string} _padString\n */\nexport function stringPad(value, _targetLength, _padString) {\n    let targetLength = _targetLength >> 0; //truncate if number or convert non-number to 0;\n    let padString = String((typeof _padString !== 'undefined' ? _padString : ' '));\n    if (value.length > targetLength) {\n        return String(value);\n    }\n    else {\n        targetLength = targetLength - value.length;\n        if (targetLength > padString.length) {\n            padString += repeatStringNumTimes(padString, targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(value);\n    }\n}\n/**\n * @description Repeat a string multiple times, cross-browser-safe alternative to string.repeat()\n * @param string\n * @param _times\n */\nfunction repeatStringNumTimes(string, _times) {\n    let times = _times;\n    let repeatedString = \"\";\n    while (times > 0) {\n        repeatedString += string;\n        times--;\n    }\n    return repeatedString;\n}\n","import { stringPad } from \"./stringPad.js\";\n/**\n * This file maps sequences of 6 bit binary digits to a character in base64.\n * 000000 -> A\n * 110011 -> Z\n * 111111 -> /\n */\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64Map = {};\nlet num = 0;\nchars.split('').forEach((char) => {\n    let key = num.toString(2);\n    key = stringPad(key, 6, '0');\n    base64Map[key] = char;\n    num++;\n});\n/**\n * Map of [six-bit binary codes] -> [Base64 characters]\n */\nexport { base64Map };\n","import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\nimport { padVersion } from \"./padVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\nexport function encodeVersion(semVer) {\n    let strResult = '';\n    // support x.y or x.y.z by using 'parts' as a variable\n    const parts = semVer.split('.').length;\n    const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n    // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n    const reversedSemver = reverseVersion(semVer);\n    // Pad to two spaces, 15.5.1 -> 15.05.01\n    const paddedSemver = padVersion(reversedSemver);\n    // turn 15.05.01 to a string '150501' then to a number 150501\n    const num = parseInt(paddedSemver.split('.').join(''));\n    // Represent as binary, add left padding to 12 or 18 characters.\n    // 150,501 -> 100100101111100101\n    let paddedBinary = num.toString(2);\n    paddedBinary = stringPad(paddedBinary, paddedStringLength, '0');\n    // Stop in case an invalid version number was provided\n    // paddedBinary must be built from sections of 6 bits\n    if (paddedBinary.length % 6 !== 0) {\n        throw 'Version must be smaller than 43.21.26)';\n    }\n    // turn every 6 bits into a character using the base64Map\n    paddedBinary.match(/.{1,6}/g).forEach((bitString) => {\n        // console.log(bitString);\n        strResult += base64Map[bitString];\n    });\n    return strResult;\n}\n","/**\n * @private\n * @description Reverses the version positions, x.y.z turns to z.y.x\n *              Example: 1.2.3 -> 03.02.01\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of zz.yy.xx (\n */\nexport function reverseVersion(semVer) {\n    if (semVer.split('.').length < 2) {\n        throw new Error('invalid semVer, must have at least two segments');\n    }\n    // Split by '.', reverse, create new array\n    return semVer.split('.').reverse().join('.');\n}\n","import { stringPad } from \"./stringPad.js\";\n/**\n * @private\n * @description Pads each segment with '0' so they have length of 2\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} in the form of xx.yy.zz (\n */\nexport function padVersion(semVer) {\n    if (semVer.split('.').length < 2) {\n        throw new Error('invalid semVer, must have at least two segments');\n    }\n    // Split by '.', reverse, create new array with padded values and concat it together\n    return semVer.split('.').map((segment) => {\n        // try to cast to number\n        const asNumber = +segment;\n        if (isNaN(asNumber) || asNumber < 0) {\n            throw 'Invalid version number provided';\n        }\n        return stringPad(segment, 2, '0');\n    }).join('.');\n}\n","const packageVersion = '1.19.0';\n/**\n * Export package version (injected during our build).\n * Reason for this is that If we import values from from package.json,\n * it will cause an error for users who do not have an 'import from json' plugin\n * as part of their build process / bundler.\n */\nexport { packageVersion };\n","import { encodeVersion } from \"./encodeVersion.js\";\nimport { getAnalyticsOptions } from \"./getAnalyticsOptions.js\";\nimport { packageVersion } from \"../internal/utils/packageVersion.js\";\nimport { encodeOSVersion } from \"./encodeOSVersion.js\";\n/**\n * @private\n * @description Try to get the node version out of process, if browser just return 0.0.0\n */\nfunction getNodeVersion() {\n    const failedVersion = '0.0.0';\n    if (typeof window !== 'undefined') {\n        return failedVersion;\n    }\n    else {\n        // node env\n        try {\n            return process.versions.node || failedVersion;\n        }\n        catch (e) {\n            return failedVersion;\n        }\n    }\n}\n/**\n * @private\n * @description Ensure that all values ITrackedPropertiesThroughAnalytics are populated.\n * Accept a partial map of values and returns the complete interface of ITrackedPropertiesThroughAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n */\nfunction ensureShapeOfTrackedProperties(trackedAnalytics) {\n    // try to get the process version from node, but if we're on the client return 0.0.0\n    const defaults = {\n        techVersion: getNodeVersion(),\n        sdkCode: 'T',\n        sdkSemver: packageVersion.split('-')[0],\n        product: 'A',\n        osType: 'Z',\n        osVersion: '0.0',\n        responsive: false,\n        placeholder: false,\n        lazyload: false,\n        accessibility: false\n    };\n    if (!trackedAnalytics) {\n        return defaults;\n    }\n    else {\n        return Object.assign(Object.assign({}, defaults), trackedAnalytics);\n    }\n}\n/**\n * @private\n * @description Creates the complete SDK signature by using all the values provided by ITrackedPropertiesThroughAnalytics\n *              Creation of the signature\n *              - Set the AlgoVersion of the encoding, this is an internal letter that represents the version\n *                of our encoding algorithm, it will allow us to perform breaking changes if we'll need them.\n *              - Take the constant SDK code (Arbitrary letter chosen for each SDK, for Base that letter is 'T')\n *                this is used to tell apart which SDK is being tracked.\n *              - Take the {major.minor} versions of the node version (techVersion) (14.2, 16.2 etc.)\n *              - Take the full semver of the SDK you wish to track\n *              - Take the features used(lazy, placeholder etc.) and turn them to a letter (for example accessibility -> D)\n *              - Before appending the string, the Versions must be encoded, see the function `encodeVersion` for more details\n *              - Append all the variables to a single string\n *              - In any case of an error, return the single letter 'E'\n *\n * @return {string} sdkAnalyticsSignature\n */\nexport function getSDKAnalyticsSignature(_trackedAnalytics) {\n    const trackedAnalytics = ensureShapeOfTrackedProperties(_trackedAnalytics);\n    const analyticsOptions = getAnalyticsOptions(trackedAnalytics);\n    try {\n        const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n        const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n        const encodedTechVersion = encodeVersion(twoPartVersion);\n        const encodedOSVersion = encodeOSVersion(analyticsOptions.osVersion);\n        const featureCode = analyticsOptions.feature;\n        const SDKCode = analyticsOptions.sdkCode;\n        const { product, osType } = analyticsOptions;\n        const algoVersion = 'D'; // The algo version is determined here, it should not be an argument\n        return `${algoVersion}${product}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${osType}${encodedOSVersion}${featureCode}`;\n    }\n    catch (e) {\n        // Either SDK or Node versions were unparsable\n        return 'E';\n    }\n}\n/**\n * @private\n * @description Removes patch version from the semver if it exists\n *              Turns x.y.z OR x.y into x.y\n * @param {'x.y.z' | 'x.y' | string} semVerStr\n */\nfunction removePatchFromSemver(semVerStr) {\n    const parts = semVerStr.split('.');\n    return `${parts[0]}.${parts[1]}`;\n}\n","/**\n * @private\n * @description Gets the analyticsOptions from options- should include sdkSemver, techVersion, sdkCode, and feature\n * @param {ITrackedPropertiesThroughAnalytics} options\n * @returns {IAnalyticsOptions}\n */\nexport function getAnalyticsOptions(options) {\n    const analyticsOptions = {\n        sdkSemver: options.sdkSemver,\n        techVersion: options.techVersion,\n        sdkCode: options.sdkCode,\n        product: options.product,\n        feature: '0',\n        osType: options.osType,\n        osVersion: options.osVersion,\n    };\n    if (options.accessibility) {\n        analyticsOptions.feature = 'D';\n    }\n    if (options.lazyload) {\n        analyticsOptions.feature = 'C';\n    }\n    if (options.responsive) {\n        analyticsOptions.feature = 'A';\n    }\n    if (options.placeholder) {\n        analyticsOptions.feature = 'B';\n    }\n    return analyticsOptions;\n}\n","import { base64Map } from \"./base64Map.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string for OS\n * @param {string} semVer Input is x.y\n * @return {string} A string built from 2 characters of the base64 table that encode the semVer\n */\nexport function encodeOSVersion(semVer) {\n    const [major, minor] = semVer.split('.');\n    //convert to binary\n    const binaryMajorVersion = parseInt(major).toString(2);\n    const binaryMinorVersion = parseInt(minor).toString(2);\n    //pad to 6\n    const paddedMajor = binaryMajorVersion.padStart(6, '0');\n    const paddedMinor = binaryMinorVersion.padStart(6, '0');\n    return base64Map[paddedMajor] + base64Map[paddedMinor];\n}\n","import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport const SEO_TYPES = {\n    \"image/upload\": \"images\",\n    \"image/private\": \"private_images\",\n    \"image/authenticated\": \"authenticated_images\",\n    \"raw/upload\": \"files\",\n    \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryFile {\n    constructor(publicID, cloudConfig = {}, urlConfig) {\n        this.setPublicID(publicID);\n        this.setCloudConfig(cloudConfig);\n        this.setURLConfig(urlConfig);\n    }\n    /**\n     * @description Sets the URL Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setURLConfig(urlConfig) {\n        this.urlConfig = new URLConfig(urlConfig);\n        return this;\n    }\n    /**\n     * @description Sets the Cloud Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setCloudConfig(cloudConfig) {\n        this.cloudName = cloudConfig.cloudName;\n        this.apiKey = cloudConfig.apiKey;\n        this.apiSecret = cloudConfig.apiSecret;\n        this.authToken = cloudConfig.authToken;\n        return this;\n    }\n    /**\n     * @description Sets the public ID of the asset.\n     * @param {string} publicID The public ID of the asset.\n     * @return {this}\n     */\n    setPublicID(publicID) {\n        // PublicID must be a string!\n        this.publicID = publicID ? publicID.toString() : '';\n        return this;\n    }\n    /**\n     * @description Sets the delivery type of the asset.\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\n     * @return {this}\n     */\n    setDeliveryType(newType) {\n        this.deliveryType = newType;\n        return this;\n    }\n    /**\n     * @description Sets the URL SEO suffix of the asset.\n     * @param {string} newSuffix The SEO suffix.\n     * @return {this}\n     */\n    setSuffix(newSuffix) {\n        this.suffix = newSuffix;\n        return this;\n    }\n    /**\n     * @description Sets the signature of the asset.\n     * @param {string} signature The signature.\n     * @return {this}\n     */\n    setSignature(signature) {\n        this.signature = signature;\n        return this;\n    }\n    /**\n     * @description Sets the version of the asset.\n     * @param {string} newVersion The version of the asset.\n     * @return {this}\n     */\n    setVersion(newVersion) {\n        if (newVersion) {\n            this.version = newVersion;\n        }\n        return this;\n    }\n    /**\n     * @description Sets the asset type.\n     * @param {string} newType The type of the asset.\n     * @return {this}\n     */\n    setAssetType(newType) {\n        if (newType) {\n            this.assetType = newType;\n        }\n        return this;\n    }\n    sign() {\n        return this;\n    }\n    /**\n     * @description Serializes to URL string\n     * @param overwriteOptions\n     */\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n    }\n    /**\n     * @description Validate various options before attempting to create a URL\n     * The function will throw in case a violation\n     * @throws Validation errors\n     */\n    validateAssetForURLCreation() {\n        if (typeof this.cloudName === 'undefined') {\n            throw 'You must supply a cloudName when initializing the asset';\n        }\n        const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n        const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n        if (suffixContainsDot || suffixContainsSlash) {\n            throw '`suffix`` should not include . or /';\n        }\n    }\n    /**\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n     * * image/upload -> images\n     * * video/upload -> videos\n     * If no match is found, return `{asset}/{delivery}`\n     */\n    getResourceType() {\n        const assetType = handleAssetType(this.assetType);\n        const deliveryType = handleDeliveryType(this.deliveryType);\n        const hasSuffix = !!this.suffix;\n        const regularSEOType = `${assetType}/${deliveryType}`;\n        const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n        const useRootPath = this.urlConfig.useRootPath;\n        const shorten = this.urlConfig.shorten;\n        // Quick exit incase of useRootPath\n        if (useRootPath) {\n            if (regularSEOType === 'image/upload') {\n                return ''; // For image/upload we're done, just return nothing\n            }\n            else {\n                throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n            }\n        }\n        if (shorten && regularSEOType === 'image/upload') {\n            return 'iu';\n        }\n        if (hasSuffix) {\n            if (shortSEOType) {\n                return shortSEOType;\n            }\n            else {\n                throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n            }\n        }\n        // If all else fails, return the regular image/upload combination (asset/delivery)\n        return regularSEOType;\n    }\n    getSignature() {\n        if (this.signature) {\n            return `s--${this.signature}--`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     *\n     * @description Creates a fully qualified CloudinaryURL\n     * @return {string} CloudinaryURL\n     * @throws Validation Errors\n     */\n    createCloudinaryURL(transformation, trackedAnalytics) {\n        // In accordance with the existing implementation, if no publicID exists we should return nothing.\n        if (!this.publicID) {\n            return '';\n        }\n        // Throws if some options are mis-configured\n        // See the function for more information on when it throws\n        this.validateAssetForURLCreation();\n        const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n        const transformationString = transformation ? transformation.toString() : '';\n        const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n        const publicID = this.publicID;\n        if (typeof transformation === 'string') {\n            const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID.replace(/,/g, '%2C'), this.suffix]\n                .filter((a) => a)\n                .join('/');\n            return url;\n        }\n        else {\n            // Avoid applying encodeURI on entire string in case where we have transformations with comma (i.e. f_auto,q_auto)\n            // Since encodeURI does not encode commas we replace commas *only* on the publicID\n            const safeURL = [\n                encodeURI(prefix),\n                this.getResourceType(),\n                this.getSignature(),\n                encodeURI(transformationString),\n                version,\n                encodeURI(publicID).replace(/,/g, '%2C'),\n                this.suffix && encodeURI(this.suffix)\n            ]\n                .filter((a) => a)\n                .join('/')\n                .replace(/\\?/g, '%3F')\n                .replace(/=/g, '%3D');\n            const shouldAddAnalytics = this.urlConfig.analytics !== false && !(publicID.includes('?'));\n            let queryParamsString = '';\n            if (typeof (this.urlConfig.queryParams) === 'object') {\n                try {\n                    const queryParams = new URLSearchParams(this.urlConfig.queryParams);\n                    if (shouldAddAnalytics) {\n                        queryParams.set(\"_a\", getSDKAnalyticsSignature(trackedAnalytics));\n                    }\n                    queryParamsString = queryParams.toString();\n                }\n                catch (err) {\n                    console.error('Error: URLSearchParams is not available so the queryParams object cannot be parsed, please try passing as an already parsed string');\n                }\n            }\n            else {\n                queryParamsString = this.urlConfig.queryParams || '';\n                if (shouldAddAnalytics) {\n                    queryParamsString += `${(queryParamsString.length > 0 ? '&' : '')}_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n                }\n            }\n            if (queryParamsString) {\n                return `${safeURL}?${queryParamsString}`;\n            }\n            else {\n                return safeURL;\n            }\n        }\n    }\n}\nexport { CloudinaryFile };\n","import { isUrl } from \"./urlUtils/isUrl.js\";\nimport { isFileName } from \"./urlUtils/isFileName.js\";\nimport { publicIDContainsVersion } from \"./urlUtils/publicIDContainsVersion.js\";\n/**\n * Create the URL prefix for Cloudinary resources.\n * Available use cases\n * http://res.cloudinary.com/{cloudName}\n * https://res.cloudinary.com/{cloudName}\n * https://{cloudName}-res.cloudinary.com/\n * http://{domain}/${cloudName}\n * https://{domain}/${cloudName}\n * https://{domain}\n * @private\n *\n * @param {string} cloudName\n * @param {IURLConfig} urlConfig\n */\nfunction getUrlPrefix(cloudName, urlConfig) {\n    const secure = urlConfig.secure;\n    const privateCDN = urlConfig.privateCdn;\n    const cname = urlConfig.cname;\n    const secureDistribution = urlConfig.secureDistribution;\n    if (!secure && !cname) {\n        return `http://res.cloudinary.com/${cloudName}`;\n    }\n    if (secure && !secureDistribution && privateCDN) {\n        return `https://${cloudName}-res.cloudinary.com`;\n    }\n    if (secure && !secureDistribution) {\n        return `https://res.cloudinary.com/${cloudName}`;\n    }\n    if (secure && secureDistribution && privateCDN) {\n        return `https://${secureDistribution}`;\n    }\n    if (secure && secureDistribution) {\n        return `https://${secureDistribution}/${cloudName}`;\n    }\n    if (!secure && cname) {\n        return `http://${cname}/${cloudName}`;\n    }\n    else {\n        return 'ERROR';\n    }\n}\n/**\n * @private\n * @param assetType\n */\nfunction handleAssetType(assetType) {\n    //default to image\n    if (!assetType) {\n        return 'image';\n    }\n    return assetType;\n}\n/**\n * @private\n * @param deliveryType\n */\nfunction handleDeliveryType(deliveryType) {\n    //default to upload\n    if (!deliveryType) {\n        return 'upload';\n    }\n    return deliveryType;\n}\n/**\n *\n * @param {string} publicID\n * @param {number} version\n * @param {boolean} forceVersion\n */\nfunction getUrlVersion(publicID, version, forceVersion) {\n    const shouldForceVersion = forceVersion !== false;\n    if (version) {\n        return `v${version}`;\n    }\n    // In all these conditions we never force a version\n    if (publicIDContainsVersion(publicID) || isUrl(publicID) || isFileName(publicID)) {\n        return '';\n    }\n    return shouldForceVersion ? 'v1' : '';\n}\nexport { handleAssetType, getUrlVersion, handleDeliveryType, getUrlPrefix };\n","/**\n *\n * @param publicID\n */\nexport function publicIDContainsVersion(publicID) {\n    return publicID.match(/^v[0-9]+/);\n}\n","/**\n *\n * @param publicID\n */\nexport function isUrl(publicID) {\n    return publicID.match(/^https?:\\//);\n}\n","/**\n *\n * @param publicID\n */\nexport function isFileName(publicID) {\n    return publicID.indexOf('/') < 0;\n}\n","import { CloudinaryFile } from \"./CloudinaryFile.js\";\nimport { DeliveryFormatAction } from \"@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction\";\n/**\n * @desc Cloudinary Transformable interface, extended by any class that needs a Transformation Interface\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryTransformable extends CloudinaryFile {\n    constructor(publicID, cloudConfig, urlConfig, transformation) {\n        /* istanbul ignore next */\n        super(publicID, cloudConfig, urlConfig);\n        this.transformation = transformation;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Animated} animated\n     * @return {this}\n     */\n    animated(animated) {\n        this.transformation.animated(animated);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Border} border\n     * @return {this}\n     */\n    border(border) {\n        this.transformation.border(border);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Reshape} reshape\n     * @return {this}\n     */\n    reshape(reshape) {\n        this.transformation.reshape(reshape);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Resize} resize\n     * @return {this}\n     */\n    resize(resize) {\n        this.transformation.resize(resize);\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.quality\n     * @param {string|number} quality\n     * @return {this}\n     */\n    quality(quality) {\n        this.addAction(new DeliveryFormatAction('q', quality));\n        return this;\n    }\n    /**\n     * @desc An alias to Action Delivery.format\n     * @param {string} format\n     * @return {this}\n     */\n    format(format) {\n        this.addAction(new DeliveryFormatAction('f', format));\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.RoundCorners} roundCorners\n     * @return {this}\n     */\n    roundCorners(roundCorners) {\n        this.transformation.roundCorners(roundCorners);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        this.transformation.overlay(overlayAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Variable} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        this.transformation.addVariable(variableAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Condition} conditionalAction\n     * @return {this}\n     */\n    conditional(conditionalAction) {\n        this.transformation.conditional(conditionalAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Effect} effect\n     * @return {this}\n     */\n    effect(effect) {\n        this.transformation.effect(effect);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Adjust} action\n     * @return {this}\n     */\n    adjust(action) {\n        this.transformation.adjust(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Rotate} rotate\n     * @return {this}\n     */\n    rotate(rotate) {\n        this.transformation.rotate(rotate);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        this.transformation.namedTransformation(namedTransformation);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Delivery} deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        this.transformation.delivery(deliveryAction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Qualifiers.color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        this.transformation.backgroundColor(color);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.PSDTools} action\n     * @return {this}\n     */\n    psdTools(action) {\n        this.transformation.psdTools(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Extract} action\n     * @return {this}\n     */\n    extract(action) {\n        this.transformation.extract(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        this.transformation.addFlag(flagQualifier);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.CustomFunction} customFunction\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        this.transformation.customFunction(customFunction);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        this.transformation.addAction(action);\n        return this;\n    }\n    /**\n     * @description Extend your transformation with another transformation\n     * @param { string | SDK.Transformation } tx\n     */\n    addTransformation(tx) {\n        this.transformation.addTransformation(tx);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @return {string}\n     */\n    toString() {\n        return this.transformation.toString();\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        this.transformation.underlay(underlayAction);\n        return this;\n    }\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(this.transformation, overwriteOptions === null || overwriteOptions === void 0 ? void 0 : overwriteOptions.trackedAnalytics);\n    }\n}\nexport { CloudinaryTransformable };\n","import { ImageTransformation } from \"@cloudinary/transformation-builder-sdk/transformation/ImageTransformation\";\nimport { CloudinaryTransformable } from \"./CloudinaryTransformable.js\";\n/**\n * @desc Cloudinary image asset, with image-related transformations\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryImage extends CloudinaryTransformable {\n    constructor(publicID, cloudConfig, urlConfig) {\n        /* istanbul ignore next */\n        super(publicID, cloudConfig, urlConfig, new ImageTransformation());\n    }\n}\nexport { CloudinaryImage };\n","import { Transformation } from \"./Transformation.js\";\n/**\n * @summary SDK\n * @extends {SDK.Transformation}\n * @memberOf SDK\n */\nclass VideoTransformation extends Transformation {\n}\nexport { VideoTransformation };\n","import { CloudinaryTransformable } from \"./CloudinaryTransformable.js\";\nimport { VideoTransformation } from \"../transformation/VideoTransformation.js\";\n/**\n * @desc Cloudinary video asset, with video-related transformations\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryVideo extends CloudinaryTransformable {\n    constructor(publicID, cloudConfig, urlConfig) {\n        /* istanbul ignore next */\n        super(publicID, cloudConfig, urlConfig, new VideoTransformation());\n        this.assetType = 'video';\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.Transcode} action\n     * @return {this}\n     */\n    transcode(action) {\n        this.transformation.transcode(action);\n        return this;\n    }\n    /**\n     * @desc A proxy to {@link SDK.Transformation| Transformation} - Calls the same method contained in this.transformation\n     * @param {Actions.VideoEdit} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        this.transformation.videoEdit(action);\n        return this;\n    }\n}\nexport { CloudinaryVideo };\n","import { CloudinaryImage } from \"../assets/CloudinaryImage.js\";\nimport { CloudinaryVideo } from \"../assets/CloudinaryVideo.js\";\nclass Cloudinary {\n    constructor(cloudinaryConfig) {\n        if (cloudinaryConfig) {\n            this.cloudinaryConfig = cloudinaryConfig;\n        }\n    }\n    image(publicID) {\n        return new CloudinaryImage(publicID, this.cloudinaryConfig.cloud, this.cloudinaryConfig.url);\n    }\n    video(publicID) {\n        return new CloudinaryVideo(publicID, this.cloudinaryConfig.cloud, this.cloudinaryConfig.url);\n    }\n    setConfig(cloudinaryConfig) {\n        this.cloudinaryConfig = cloudinaryConfig;\n        return this;\n    }\n    getConfig() {\n        return this.cloudinaryConfig;\n    }\n    extendConfig() {\n        // Future implementation\n    }\n}\nexport { Cloudinary };\n"],"names":["exports","mediaQuery","values","parseQuery","some","query","inverse","typeMatch","type","expressionsMatch","expressions","every","expression","feature","modifier","expValue","value","toLowerCase","toPx","toDpi","toDecimal","parseInt","RE_MEDIA_QUERY","RE_MQ_EXPRESSION","RE_MQ_FEATURE","RE_LENGTH_UNIT","RE_RESOLUTION_UNIT","split","map","captures","trim","match","parsed","ratio","numbers","decimal","Number","resolution","parseFloat","String","length","staticMatch","require","dynamicMatch","window","matchMedia","Mql","forceStatic","mql","self","this","update","evt","matches","media","call","addListener","listener","removeListener","dispose","module","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","uppercasePattern","msPattern","cache","toHyphenLower","hasOwnProperty","hName","replace","test","shallowEqualObjects","objA","objB","aKeys","Object","keys","bKeys","len","i","key","prototype","stringOrNumber","types","all","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","matchers","orientation","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","colorIndex","monochrome","featureMatchers","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","toQuery","obj","rules","mq","forEach","k","v","push","realKey","hyphenate","keyVal","join","Context","createContext","undefined","hyphenateKeys","reduce","result","useIsUpdate","ref","useRef","useEffect","current","useQuery","settings","getQuery","makeQuery","useState","_useState4","setQuery","newQuery","useMediaQuery","device","onChange","deviceSettings","deviceFromProps","deviceFromContext","useContext","getDevice","_useState2","setDevice","newDevice","useDevice","getMatchMedia","_useState6","setMq","isUpdate","newMq","useMatchMedia","_useState8","setMatches","updateMatches","ev","useMatches","DeliveryAction","Action","ColorSpace","cmyk","keepCmyk","noCmyk","srgb","tinySrgb","trueColor","DeliveryDPRAction","_Action","_inherits","_super","_createSuper","dprValue","_this","_classCallCheck","_actionModel","actionType","dprAsFloat","toFloatAsString","dpr","addQualifier","Qualifier","_createClass","actionModel","FormatQualifier","_QualifierValue","val","QualifierValue","deliveryKey","deliveryType","modelProperty","deliveryTypeValue","getValue","DELIVERY_MODE_TO_ACTION_TYPE_MAP","ProgressiveQualifier","_FlagQualifier","mode","FlagQualifier","DeliveryFormatAction","_DeliveryAction","lossy","addFlag","progressive","getFlagValue","preserveTransparency","formatType","AspectRatioQualifierValue","apply","arguments","ResizeSimpleAction","cropType","cropWidth","cropHeight","dimensions","CROP_MODE_TO_ACTION_TYPE_MAP","x","concat","qualifierValue","relative","regionRelative","ACTION_TYPE_TO_CROP_MODE_MAP","ignoreInitialAspectRatio","GravityQualifier","_Qualifier","AutoGravity","_GravityQualifier","_len","AutoFocusObjects","Array","_key","addValue","FocusOnGravity","FocusOnObjects","CompassGravity","dir","focusOn","args","res","autoGravity","FocusOnValue","getGravityValue","gravity","createIAutoFocusObject","toString","avoid","weight","createAutoGravityModel","gravityQualifier","gravityType","autoFocus","startsWith","filter","createGravityModel","gravityValue","includes","isCompassGravity","compass","createCompassGravityModel","isOcrGravity","isIAutoGravityString","isAutoGravity","hasAutoGravity","focusOnObjects","slice","_autoGravity","autoFocusObjects","autoGravityInstance","_toConsumableArray","fallbackGravity","createFocusOnGravityModel","focusOnValues","g","createFocusOnGravity","ocr","AutoFocus","_weight","shouldAvoid","shouldAddWeight","getName","getWeight","w","CompassQualifier","createAutoFocusFromModel","autoGravityObjectModel","createAutoGravityFromModel","gravityModel","createGravityFromModel","isCompassGravityModel","isOcrGravityModel","isAutoGravityModel","str","createFocusOnGravityFromModel","ResizeAdvancedAction","_ResizeSimpleAction","_get","_getPrototypeOf","ResizeFillAction","_ResizeAdvancedAction","y","fill","actionToJson","_a","_b","_c","actionModelIsNotEmpty","sourceTransformationError","source","transformation","error","createUnsupportedError","constructor","_ActionModel","qualifiers","Map","flags","delimiter","actionTag","tag","prepareQualifiers","from","entries","flag","sort","mapToSortedArray","qualifier","_qualifier$toLowerCas","_qualifier$toLowerCas2","_slicedToArray","set","qualifierKey","get","ActionModel","objectFlip","limitFit","limitFill","minimumFit","thumbnail","limitPad","minimumPad","autoPad","ACTION_TYPE_TO_QUALITY_MODE_MAP","autoBest","autoEco","autoGood","autoLow","jpegminiHigh","jpegminiMedium","jpegminiBest","CHROMA_VALUE_TO_CHROMA_MODEL_ENUM","COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP","CHROMA_MODEL_ENUM_TO_CHROMA_VALUE","COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP","colorSpace","density","defaultImage","format","quality","redEye","advancedRedEye","oilPaint","unsharpMask","makeTransparent","generativeRestore","upscale","fullHd","fullHdWifi","fullHdLean","hdLean","qualifierToJson","_qualifierModel","_QualifierModel","QualifierModel","hasValue","isArray","prepareColor","substr","returnValue","isNaN","indexOf","UnsupportedError","_Error","message","_wrapNativeSuper","flagType","flagValue","setDelimiter","BackgroundColor","RawAction","raw","Transformation","actions","action","actionToAdd","tx","a","animatedAction","addAction","borderAction","reshapeAction","resizeAction","roundCornersAction","overlayAction","underlayAction","setLayerType","variableAction","conditionAction","effectAction","rotateAction","namedTransformation","deliveryAction","flagQualifier","flagToAdd","customFunction","_step","_iterator","_createForOfIteratorHelper","s","n","done","json","toJson","e","f","ImageTransformation","_Transformation","ALLOWED_URL_CONFIG","_Config","URLConfig","userURLConfig","urlConfig","filterOutNonSupportedKeys","assign","_assertThisInitialized","secure","cname","secureDistribution","privateCdn","signUrl","longUrlSignature","shorten","useRootPath","forceVersion","params","queryParams","Config","userProvidedConfig","validKeys","create","console","warn","stringPad","_targetLength","_padString","targetLength","padString","_times","times","repeatedString","repeatStringNumTimes","base64Map","num","encodeVersion","semVer","strResult","paddedStringLength","reversedSemver","reverse","reverseVersion","paddedSemver","segment","asNumber","padVersion","paddedBinary","bitString","char","getNodeVersion","failedVersion","process","versions","getSDKAnalyticsSignature","_trackedAnalytics","analyticsOptions","options","sdkSemver","techVersion","sdkCode","product","osType","osVersion","accessibility","lazyload","responsive","placeholder","getAnalyticsOptions","trackedAnalytics","defaults","ensureShapeOfTrackedProperties","twoPartVersion","semVerStr","parts","removePatchFromSemver","encodedSDKVersion","encodedTechVersion","encodedOSVersion","_semVer$split","_semVer$split2","major","minor","binaryMajorVersion","binaryMinorVersion","paddedMajor","padStart","paddedMinor","encodeOSVersion","featureCode","SDKCode","SEO_TYPES","CloudinaryFile","publicID","cloudConfig","setPublicID","setCloudConfig","setURLConfig","cloudName","apiKey","apiSecret","authToken","newType","newSuffix","suffix","signature","newVersion","version","assetType","overwriteOptions","createCloudinaryURL","suffixContainsDot","suffixContainsSlash","handleAssetType","handleDeliveryType","hasSuffix","regularSEOType","shortSEOType","validateAssetForURLCreation","prefix","privateCDN","getUrlPrefix","transformationString","shouldForceVersion","publicIDContainsVersion","isUrl","isFileName","getUrlVersion","getResourceType","getSignature","safeURL","encodeURI","shouldAddAnalytics","analytics","queryParamsString","URLSearchParams","CloudinaryTransformable","_CloudinaryFile","animated","border","reshape","resize","roundCorners","overlay","addVariable","conditionalAction","conditional","effect","adjust","rotate","delivery","backgroundColor","psdTools","extract","addTransformation","underlay","CloudinaryImage","_CloudinaryTransforma","VideoTransformation","CloudinaryVideo","transcode","videoEdit","Cloudinary","cloudinaryConfig","cloud","url"],"sourceRoot":""}